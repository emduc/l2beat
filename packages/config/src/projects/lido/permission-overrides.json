{
  "version": "1.0",
  "lastModified": "2025-10-17T12:05:14.819Z",
  "contracts": {
    "eth:0xfFA96D84dEF2EA035c7AB153D8B991128e3d72fD": {
      "functions": [
        {
          "functionName": "setOwner",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the owner of the contract. This role is dedicated to the DAO. The owner can add new guardians, change the quorum, and unpause the deposits.",
          "ownerDefinitions": [
            {
              "path": "$self.getOwner"
            }
          ],
          "timestamp": "2025-10-06T14:44:26.723Z"
        },
        {
          "functionName": "setPauseIntentValidityPeriodBlocks",
          "userClassification": "permissioned",
          "checked": true,
          "score": "medium-risk",
          "description": "Sets the window of validity of a pause intent. This is the reaction time allowed for guardians to pause deposits. When a guardian wants to pause deposits it specifies a block number, the pause is only applied if the current block number is within the validity period of the specified block. This is to avoid replay of pause messages.",
          "ownerDefinitions": [
            {
              "path": "$self.getOwner"
            }
          ],
          "timestamp": "2025-10-06T15:05:15.917Z"
        },
        {
          "functionName": "setMaxOperatorsPerUnvetting",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Sets a limit on how many node operators can have their vetted signing keys unvetted in one transaction, as a safeguard against drastic changes.",
          "ownerDefinitions": [
            {
              "path": "$self.getOwner"
            }
          ],
          "timestamp": "2025-10-06T15:05:10.563Z"
        },
        {
          "functionName": "setGuardianQuorum",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the quorum value. This is the minimum number of guardians that need to take part in a deposit for it to be valid.",
          "ownerDefinitions": [
            {
              "path": "$self.getOwner"
            }
          ],
          "timestamp": "2025-10-06T14:47:10.959Z"
        },
        {
          "functionName": "addGuardian",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Adds a guardian and sets a new custom quorum value. Guardians co-sign deposits to reduce the risk of collusion with node operators.",
          "ownerDefinitions": [
            {
              "path": "$self.getOwner"
            }
          ],
          "timestamp": "2025-10-17T12:05:14.819Z"
        },
        {
          "functionName": "addGuardians",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Adds multiple guardians and sets a new custom quorum value. Guardians co-sign deposits to reduce the risk of collusion with node operators.",
          "ownerDefinitions": [
            {
              "path": "$self.getOwner"
            }
          ],
          "timestamp": "2025-10-06T14:32:19.568Z"
        },
        {
          "functionName": "removeGuardian",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Removes a guardian address and sets a new quorum value. There are no protections on the quorum, this could be set to zero (see setGuardianQuorum).",
          "ownerDefinitions": [
            {
              "path": "$self.getOwner"
            }
          ],
          "timestamp": "2025-10-06T14:36:26.745Z"
        },
        {
          "functionName": "pauseDeposits",
          "userClassification": "permissioned",
          "checked": true,
          "score": "medium-risk",
          "description": "Pauses the deposits. Funds can no longer be deposited into new validators until deposits are unpaused. This can be called by any guardian when a frontrunning by a node operator is suspected and prevents the loss of user funds through deposits.",
          "ownerDefinitions": [
            {
              "path": "$self.getGuardians"
            }
          ],
          "timestamp": "2025-10-06T15:01:19.198Z"
        },
        {
          "functionName": "unpauseDeposits",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Unpauses the deposits without delay.",
          "ownerDefinitions": [
            {
              "path": "$self.getOwner"
            }
          ],
          "timestamp": "2025-10-06T14:43:53.476Z"
        },
        {
          "functionName": "depositBufferedEther",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Deposits ETH into a given validator using `Lido.deposit`. The message must include at least 4/6 signatures from guardians for it to be valid.",
          "ownerDefinitions": [
            {
              "path": "$self.getGuardians"
            }
          ],
          "timestamp": "2025-10-06T15:01:55.782Z"
        },
        {
          "functionName": "unvetSigningKeys",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Unvets signing keys for the given node operators. This can be called by any guardian when a frontrunning by a node operator is suspectedand prevents the loss of user funds through deposits.",
          "ownerDefinitions": [
            {
              "path": "$self.getGuardians"
            }
          ],
          "timestamp": "2025-10-06T15:05:48.571Z"
        }
      ]
    },
    "eth:0x9f3b9198911054B122fDb865f8A5Ac516201c339": {
      "functions": [
        {
          "functionName": "createPermission",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Creates a new permission and specifies its permission manager and the role ID.\t",
          "ownerDefinitions": [
            {
              "path": "$self.CREATE_PERMISSIONS_ROLE"
            }
          ],
          "timestamp": "2025-10-07T21:23:36.668Z"
        },
        {
          "functionName": "grantPermission",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Grants a permission (a role) to an entity. The entity can then perform all the actions associated with the role. Optionally the manager can specify parameters associated with the permission that could grant additional permisisons specifically for those parameters.\t",
          "ownerDefinitions": [
            {
              "path": "$self.permissions[eth:0x9895F0F17cc1d1891b6f18ee0b483B6f221b37Bb].CREATE_PERMISSIONS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xf73a1260d222f447210581DDf212D915c09a3249].ASSIGN_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xf73a1260d222f447210581DDf212D915c09a3249].MINT_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xf73a1260d222f447210581DDf212D915c09a3249].REVOKE_VESTINGS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].EXECUTE_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].RUN_SCRIPT_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].TRANSFER_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].EXECUTE_PAYMENTS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].MANAGE_PAYMENTS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].CREATE_PAYMENTS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].CHANGE_PERIOD_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].CHANGE_BUDGETS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].MODIFY_QUORUM_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].MODIFY_SUPPORT_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].CREATE_VOTES_ROLE.manager"
            }
          ],
          "timestamp": "2025-10-07T21:13:38.281Z"
        },
        {
          "functionName": "grantPermissionP",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Grants a permission with parameters. Similar to grantPermission but allows specifying additional parameters that restrict or extend the permission.",
          "ownerDefinitions": [
            {
              "path": "$self.permissions[eth:0x9895F0F17cc1d1891b6f18ee0b483B6f221b37Bb].CREATE_PERMISSIONS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xf73a1260d222f447210581DDf212D915c09a3249].ASSIGN_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xf73a1260d222f447210581DDf212D915c09a3249].MINT_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xf73a1260d222f447210581DDf212D915c09a3249].REVOKE_VESTINGS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].EXECUTE_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].RUN_SCRIPT_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].TRANSFER_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].EXECUTE_PAYMENTS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].MANAGE_PAYMENTS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].CREATE_PAYMENTS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].CHANGE_PERIOD_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].CHANGE_BUDGETS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].MODIFY_QUORUM_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].MODIFY_SUPPORT_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].CREATE_VOTES_ROLE.manager"
            }
          ],
          "timestamp": "2025-10-07T21:13:46.752Z"
        },
        {
          "functionName": "revokePermission",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Revokes a permission from an entity.\t",
          "ownerDefinitions": [
            {
              "path": "$self.permissions[eth:0x9895F0F17cc1d1891b6f18ee0b483B6f221b37Bb].CREATE_PERMISSIONS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xf73a1260d222f447210581DDf212D915c09a3249].ASSIGN_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xf73a1260d222f447210581DDf212D915c09a3249].MINT_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xf73a1260d222f447210581DDf212D915c09a3249].REVOKE_VESTINGS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].EXECUTE_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].RUN_SCRIPT_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].TRANSFER_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].EXECUTE_PAYMENTS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].MANAGE_PAYMENTS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].CREATE_PAYMENTS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].CHANGE_PERIOD_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].CHANGE_BUDGETS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].MODIFY_QUORUM_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].MODIFY_SUPPORT_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].CREATE_VOTES_ROLE.manager"
            }
          ],
          "timestamp": "2025-10-07T21:22:33.913Z"
        },
        {
          "functionName": "setPermissionManager",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets a permission (role)'s manager. The manager can grant and revoke the permissions for that role ID.\t",
          "ownerDefinitions": [
            {
              "path": "$self.permissions[eth:0x9895F0F17cc1d1891b6f18ee0b483B6f221b37Bb].CREATE_PERMISSIONS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xf73a1260d222f447210581DDf212D915c09a3249].ASSIGN_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xf73a1260d222f447210581DDf212D915c09a3249].MINT_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xf73a1260d222f447210581DDf212D915c09a3249].REVOKE_VESTINGS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].EXECUTE_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].RUN_SCRIPT_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].TRANSFER_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].EXECUTE_PAYMENTS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].MANAGE_PAYMENTS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].CREATE_PAYMENTS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].CHANGE_PERIOD_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].CHANGE_BUDGETS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].MODIFY_QUORUM_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].MODIFY_SUPPORT_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].CREATE_VOTES_ROLE.manager"
            }
          ],
          "timestamp": "2025-10-07T21:23:22.058Z"
        },
        {
          "functionName": "removePermissionManager",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Removes the permission manager for a role and sets it to the zero address. This role can no longer be granted or revoked, but a new manager can still be named using the createPermission function.\t",
          "ownerDefinitions": [
            {
              "path": "$self.permissions[eth:0x9895F0F17cc1d1891b6f18ee0b483B6f221b37Bb].CREATE_PERMISSIONS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xf73a1260d222f447210581DDf212D915c09a3249].ASSIGN_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xf73a1260d222f447210581DDf212D915c09a3249].MINT_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xf73a1260d222f447210581DDf212D915c09a3249].REVOKE_VESTINGS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].EXECUTE_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].RUN_SCRIPT_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].TRANSFER_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].EXECUTE_PAYMENTS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].MANAGE_PAYMENTS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].CREATE_PAYMENTS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].CHANGE_PERIOD_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].CHANGE_BUDGETS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].MODIFY_QUORUM_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].MODIFY_SUPPORT_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].CREATE_VOTES_ROLE.manager"
            }
          ],
          "timestamp": "2025-10-07T21:22:59.241Z"
        },
        {
          "functionName": "createBurnedPermission",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Permanently locks a permission so it can never be modified. This variant is called when the manager of the role was already the zero address.\t",
          "ownerDefinitions": [
            {
              "path": "$self.permissions[0x9895F0F17cc1d1891b6f18ee0b483B6f221b37Bb].CREATE_PERMISSIONS_ROLE"
            }
          ],
          "timestamp": "2025-10-07T21:22:02.517Z"
        },
        {
          "functionName": "burnPermissionManager",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Permanently locks a permission so it can never be modified. This is done by changing the manager to a BURN_ENTITY.\t",
          "ownerDefinitions": [
            {
              "path": "$self.permissions[eth:0x9895F0F17cc1d1891b6f18ee0b483B6f221b37Bb].CREATE_PERMISSIONS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xf73a1260d222f447210581DDf212D915c09a3249].ASSIGN_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xf73a1260d222f447210581DDf212D915c09a3249].MINT_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xf73a1260d222f447210581DDf212D915c09a3249].REVOKE_VESTINGS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].EXECUTE_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].RUN_SCRIPT_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].TRANSFER_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].EXECUTE_PAYMENTS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].MANAGE_PAYMENTS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].CREATE_PAYMENTS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].CHANGE_PERIOD_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0xB9E5CBB9CA5b0d659238807E84D0176930753d86].CHANGE_BUDGETS_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].MODIFY_QUORUM_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].MODIFY_SUPPORT_ROLE.manager"
            },
            {
              "path": "$self.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].CREATE_VOTES_ROLE.manager"
            }
          ],
          "timestamp": "2025-10-07T21:22:18.000Z"
        }
      ]
    },
    "eth:0xD15a672319Cf0352560eE76d9e89eAB0889046D3": {
      "functions": [
        {
          "functionName": "requestBurnMyStETHForCover",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Tranfers stETH from the sender and irreversibly locks it on the burner contract. This increases the cover-backed burning counter. A share burn is to compensate a slashing event.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.REQUEST_BURN_MY_STETH_ROLE.members"
            }
          ],
          "timestamp": "2025-10-08T00:14:47.521Z"
        },
        {
          "functionName": "requestBurnSharesForCover",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Transfers stETH shares from another user (who should have approved) and locks it on the burner contract. This increases the cover-backed burning counter. A share burn meant to cover is to compensate a slashing event.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.REQUEST_BURN_SHARES_ROLE"
            }
          ],
          "timestamp": "2025-10-08T00:18:36.050Z"
        },
        {
          "functionName": "requestBurnMyStETH",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Tranfers stETH from the sender and irreversibly locks it on the burner contract. This increases the non-cover backed burning counter.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.REQUEST_BURN_MY_STETH_ROLE"
            }
          ],
          "timestamp": "2025-10-08T00:19:24.302Z"
        },
        {
          "functionName": "requestBurnShares",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Transfers stETH shares from another user (who should have approved) and locks it on the burner contract. This increases the non-cover backed burning counter.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.REQUEST_BURN_SHARES_ROLE"
            }
          ],
          "timestamp": "2025-10-08T00:17:57.884Z"
        },
        {
          "functionName": "recoverExcessStETH",
          "userClassification": "non-permissioned",
          "timestamp": "2025-10-02T15:54:05.788Z"
        },
        {
          "functionName": "recoverERC20",
          "userClassification": "non-permissioned",
          "timestamp": "2025-10-02T15:54:05.797Z"
        },
        {
          "functionName": "recoverERC721",
          "userClassification": "non-permissioned",
          "timestamp": "2025-10-02T15:54:05.798Z"
        },
        {
          "functionName": "commitSharesToBurn",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Marks previously requested to burn cover and non-cover shares as burnt. This function is meant to be called by the Lido contract in the same tx as the share burning it actually done.\t",
          "ownerDefinitions": [
            {
              "path": "$self.STETH"
            }
          ],
          "timestamp": "2025-10-08T00:16:58.886Z"
        },
        {
          "functionName": "grantRole",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Grants a role within the contract to a specific address. There are roles to allow burning stETH either from a delegated address or from the caller itself. Only the Governance is currently allowed to burn its own stETH.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE"
            }
          ],
          "timestamp": "2025-10-08T00:21:11.982Z"
        },
        {
          "functionName": "revokeRole",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Revokes a role to a specific address.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE"
            }
          ],
          "timestamp": "2025-10-08T00:21:58.565Z"
        }
      ]
    },
    "eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c": {
      "functions": [
        {
          "functionName": "transferToVault",
          "userClassification": "non-permissioned",
          "timestamp": "2025-10-02T19:19:15.299Z"
        }
      ]
    },
    "eth:0x3A93C17FC82CC33420d1809dDA9Fb715cc89dd37": {
      "functions": [
        {
          "functionName": "execute",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Executes arbitrary function calls to any external contract with a given ETH value. This can perform any action that is allowed to the Agent in other Lido contracts, which includes critical ones.",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].EXECUTE_ROLE"
            }
          ],
          "timestamp": "2025-10-07T20:54:38.166Z"
        },
        {
          "functionName": "safeExecute",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Similar to execute but with protections for known critical tokens. It ensures there are no direct calls to the protected tokens, the token balances don't decrease, and the list of protected tokens doesn't change.",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].SAFE_EXECUTE_ROLE"
            }
          ],
          "timestamp": "2025-10-07T20:50:58.535Z"
        },
        {
          "functionName": "addProtectedToken",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Adds a token to the protected list (maximum of 10 tokens). Those tokens are safeguarded when proposals are executed using safeExecute.",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].ADD_PROTECTED_TOKEN_ROLE"
            }
          ],
          "timestamp": "2025-10-07T20:58:00.862Z"
        },
        {
          "functionName": "removeProtectedToken",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Removes a token from the protected list.",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].REMOVE_PROTECTED_TOKEN_ROLE"
            }
          ],
          "timestamp": "2025-10-07T20:58:48.570Z"
        },
        {
          "functionName": "presignHash",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Pre-approves a hash according to ERC-1271. It allows the governance to approve a hash so that it is considered valid once verified. This allows the approval of a message without requiring the contract to actually sign it.",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].ADD_PRESIGNED_HASH_ROLE"
            }
          ],
          "timestamp": "2025-10-07T20:59:27.623Z"
        },
        {
          "functionName": "setDesignatedSigner",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Adds a designated signer. The external address can sign messages on behalf of the Agent according to ERC-1271.",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].DESIGNATE_SIGNER_ROLE"
            }
          ],
          "timestamp": "2025-10-07T20:56:59.406Z"
        },
        {
          "functionName": "forward",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Executes a script as the Agent. This is meant to be called by to execute proposals through the Agent.",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].RUN_SCRIPT_ROLE"
            }
          ],
          "timestamp": "2025-10-07T20:54:19.339Z"
        },
        {
          "functionName": "transfer",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Transfers a given ERC20 token out of the contract to a given address.",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0x3e40D73EB977Dc6a537aF587D48316feE66E9C8c].TRANSFER_ROLE"
            }
          ],
          "timestamp": "2025-10-07T20:51:56.517Z"
        },
        {
          "functionName": "initialize",
          "userClassification": "non-permissioned",
          "checked": true,
          "timestamp": "2025-10-06T15:06:24.675Z"
        }
      ]
    },
    "eth:0xdA7dE2ECdDfccC6c3AF10108Db212ACBBf9EA83F": {
      "functions": [
        {
          "functionName": "proxy__upgradeTo",
          "userClassification": "permissioned",
          "timestamp": "2025-10-02T21:26:09.167Z"
        }
      ]
    },
    "eth:0x8daEa53b17a629918CDFAB785C5c74077c1D895B": {
      "functions": [
        {
          "functionName": "addNodeOperatorStETH",
          "userClassification": "permissioned",
          "score": "medium-risk",
          "timestamp": "2025-10-02T21:26:35.194Z"
        }
      ]
    },
    "eth:0x4D4074628678Bd302921c20573EEa1ed38DdF7FB": {
      "functions": [
        {
          "functionName": "proxy__upgradeTo",
          "userClassification": "non-permissioned",
          "timestamp": "2025-10-02T21:27:42.520Z"
        }
      ]
    },
    "eth:0x919ac5C6c62B6ef7B05cF05070080525a7B0381E": {
      "functions": [
        {
          "functionName": "discardConsensusReport",
          "userClassification": "non-permissioned",
          "timestamp": "2025-10-02T21:27:52.408Z"
        }
      ]
    },
    "eth:0x71093efF8D8599b5fA340D665Ad60fA7C80688e4": {
      "functions": [
        {
          "functionName": "updateInitialEpoch",
          "userClassification": "non-permissioned",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE.members"
            }
          ],
          "timestamp": "2025-10-08T00:32:47.706Z"
        },
        {
          "functionName": "setFrameConfig",
          "userClassification": "permissioned",
          "checked": true,
          "score": "medium-risk",
          "description": "Sets the configuration of frames. Frames are time window of equal lenghts referencing the processing of a slot and the corresponding deadline. A report based on the consensus layer must be built and consensus must be reached before each deadline.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_FRAME_CONFIG_ROLE.members"
            }
          ],
          "timestamp": "2025-10-08T00:33:57.962Z"
        },
        {
          "functionName": "setFastLaneLengthSlots",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Sets the duration of a fast lane rotation in slots. Members in the fast lane can (and are expected to) submit their report during a dedicated fast lane time window before submissions are open to all other members. The members in the fast lanes are rotated at a rate set using this function. The goal is to enforce active participation of all oracle members, preventing lazy copying.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_FAST_LANE_CONFIG_ROLE.members"
            }
          ],
          "timestamp": "2025-10-08T00:34:14.239Z"
        },
        {
          "functionName": "addMember",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Adds a member to the consensus committee. Members can contribute to building consensus and submit reports.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_MEMBERS_AND_QUORUM_ROLE.members"
            }
          ],
          "timestamp": "2025-10-08T00:25:43.190Z"
        },
        {
          "functionName": "removeMember",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Removes a member from the consensus committee, and sets a new quorum.",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_MEMBERS_AND_QUORUM_ROLE"
            }
          ],
          "timestamp": "2025-10-08T00:27:12.736Z"
        },
        {
          "functionName": "setQuorum",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the quorum value. This is the amount of equal reports that need to be accumulated for each slot for a report to be considered valid and ready for processing. A value higher the the number of members in the committee would make consensus impossible.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_MEMBERS_AND_QUORUM_ROLE"
            }
          ],
          "timestamp": "2025-10-08T00:29:15.115Z"
        },
        {
          "functionName": "disableConsensus",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Temporarily disables consensus by increasing the quorum value to an unreachable number. This prevents any consensus from being reached. Consensus needs to be re-enabled using setQuorum.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DISABLE_CONSENSUS_ROLE"
            }
          ],
          "timestamp": "2025-10-08T00:30:04.541Z"
        },
        {
          "functionName": "setReportProcessor",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Sets the processor contract to which the reports are sent over to.",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_REPORT_PROCESSOR_ROLE.members"
            }
          ],
          "timestamp": "2025-10-08T00:33:31.985Z"
        },
        {
          "functionName": "submitReport",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Used by oracle members to submit hash of the data calculated for the given reference slot. If consensus is reached (more submissions of the same report than the quorum amount) the HashConsensus contract submits this report to the processing contract (either AccountingOracle or ValidatorsExitBusOracle) to enable processing.\t",
          "ownerDefinitions": [
            {
              "path": "$self.getMembers.addresses"
            }
          ],
          "timestamp": "2025-10-08T00:32:20.266Z"
        },
        {
          "functionName": "grantRole",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Grants a role within the contract to a specific address. This may allow addresses to execute any of the functions above related to the specific role.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE"
            }
          ],
          "timestamp": "2025-10-08T00:30:43.955Z"
        },
        {
          "functionName": "revokeRole",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Revokes a role for a specific address.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE"
            }
          ],
          "timestamp": "2025-10-08T00:31:11.405Z"
        }
      ]
    },
    "eth:0x7FaDB6358950c5fAA66Cb5EB8eE5147De3df355a": {
      "functions": [
        {
          "functionName": "updateInitialEpoch",
          "userClassification": "non-permissioned",
          "checked": false,
          "score": "unscored",
          "description": "",
          "ownerDefinitions": [],
          "timestamp": "2025-10-08T00:44:01.670Z"
        },
        {
          "functionName": "setFrameConfig",
          "userClassification": "permissioned",
          "checked": true,
          "score": "medium-risk",
          "description": "Sets the configuration of frames. Frames are time window of equal lenghts referencing the processing of a slot and the corresponding deadline. A report based on the consensus layer must be built and consensus must be reached before each deadline.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_FRAME_CONFIG_ROLE.members"
            }
          ],
          "timestamp": "2025-10-07T19:06:02.215Z"
        },
        {
          "functionName": "setFastLaneLengthSlots",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Sets the duration of a fast lane rotation in slots. Members in the fast lane can (and are expected to) submit their report during a dedicated fast lane time window before submissions are open to all other members. The members in the fast lanes are rotated at a rate set using this function. The goal is to enforce active participation of all oracle members, preventing lazy copying.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_FAST_LANE_CONFIG_ROLE.members"
            }
          ],
          "timestamp": "2025-10-03T14:58:41.702Z"
        },
        {
          "functionName": "addMember",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Adds a member to the consensus committee. Members can contribute to building consensus and submit reports.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_MEMBERS_AND_QUORUM_ROLE.members"
            }
          ],
          "timestamp": "2025-10-06T18:11:02.341Z"
        },
        {
          "functionName": "removeMember",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Removes a member from the consensus committee, and sets a new quorum.",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_MEMBERS_AND_QUORUM_ROLE"
            }
          ],
          "timestamp": "2025-10-03T14:58:41.703Z"
        },
        {
          "functionName": "setQuorum",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the quorum value. This is the amount of equal reports that need to be accumulated for each slot for a report to be considered valid and ready for processing. A value higher the the number of members in the committee would make consensus impossible.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_MEMBERS_AND_QUORUM_ROLE"
            }
          ],
          "timestamp": "2025-10-03T14:58:41.704Z"
        },
        {
          "functionName": "disableConsensus",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Temporarily disables consensus by increasing the quorum value to an unreachable number. This prevents any consensus from being reached. Consensus needs to be re-enabled using setQuorum.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DISABLE_CONSENSUS_ROLE"
            }
          ],
          "timestamp": "2025-10-03T14:58:41.705Z"
        },
        {
          "functionName": "setReportProcessor",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Sets the processor contract to which the reports are sent over to.",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_REPORT_PROCESSOR_ROLE.members"
            }
          ],
          "timestamp": "2025-10-03T14:58:41.705Z"
        },
        {
          "functionName": "submitReport",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Used by oracle members to submit hash of the data calculated for the given reference slot. If consensus is reached (more submissions of the same report than the quorum amount) the HashConsensus contract submits this report to the processing contract (either AccountingOracle or ValidatorsExitBusOracle) to enable processing.\t",
          "ownerDefinitions": [
            {
              "path": "$self.getMembers.addresses"
            }
          ],
          "timestamp": "2025-10-03T14:58:41.706Z"
        },
        {
          "functionName": "grantRole",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Grants a role within the contract to a specific address. This may allow addresses to execute any of the functions above related to the specific role.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE"
            }
          ],
          "timestamp": "2025-10-03T14:58:41.707Z"
        },
        {
          "functionName": "revokeRole",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Revokes a role for a specific address.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE"
            }
          ],
          "timestamp": "2025-10-03T14:58:41.708Z"
        }
      ]
    },
    "eth:0xD624B08C83bAECF0807Dd2c6880C3154a5F0B288": {
      "functions": [
        {
          "functionName": "updateInitialEpoch",
          "userClassification": "non-permissioned",
          "checked": false,
          "score": "unscored",
          "description": "",
          "ownerDefinitions": [],
          "timestamp": "2025-10-08T00:43:46.419Z"
        },
        {
          "functionName": "setFrameConfig",
          "userClassification": "permissioned",
          "checked": true,
          "score": "medium-risk",
          "description": "Sets the configuration of frames. Frames are time window of equal lenghts referencing the processing of a slot and the corresponding deadline. A report based on the consensus layer must be built and consensus must be reached before each deadline.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_FRAME_CONFIG_ROLE.members"
            }
          ],
          "timestamp": "2025-10-08T00:35:01.000Z"
        },
        {
          "functionName": "setFastLaneLengthSlots",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Sets the duration of a fast lane rotation in slots. Members in the fast lane can (and are expected to) submit their report during a dedicated fast lane time window before submissions are open to all other members. The members in the fast lanes are rotated at a rate set using this function. The goal is to enforce active participation of all oracle members, preventing lazy copying.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_FAST_LANE_CONFIG_ROLE.members"
            }
          ],
          "timestamp": "2025-10-08T00:35:02.000Z"
        },
        {
          "functionName": "addMember",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Adds a member to the consensus committee. Members can contribute to building consensus and submit reports.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_MEMBERS_AND_QUORUM_ROLE.members"
            }
          ],
          "timestamp": "2025-10-08T00:35:03.000Z"
        },
        {
          "functionName": "removeMember",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Removes a member from the consensus committee, and sets a new quorum.",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_MEMBERS_AND_QUORUM_ROLE"
            }
          ],
          "timestamp": "2025-10-08T00:35:04.000Z"
        },
        {
          "functionName": "setQuorum",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the quorum value. This is the amount of equal reports that need to be accumulated for each slot for a report to be considered valid and ready for processing. A value higher the the number of members in the committee would make consensus impossible.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_MEMBERS_AND_QUORUM_ROLE"
            }
          ],
          "timestamp": "2025-10-08T00:35:05.000Z"
        },
        {
          "functionName": "disableConsensus",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Temporarily disables consensus by increasing the quorum value to an unreachable number. This prevents any consensus from being reached. Consensus needs to be re-enabled using setQuorum.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DISABLE_CONSENSUS_ROLE"
            }
          ],
          "timestamp": "2025-10-08T00:35:06.000Z"
        },
        {
          "functionName": "setReportProcessor",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Sets the processor contract to which the reports are sent over to.",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_REPORT_PROCESSOR_ROLE.members"
            }
          ],
          "timestamp": "2025-10-08T00:35:07.000Z"
        },
        {
          "functionName": "submitReport",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Used by oracle members to submit hash of the data calculated for the given reference slot. If consensus is reached (more submissions of the same report than the quorum amount) the HashConsensus contract submits this report to the processing contract (either AccountingOracle or ValidatorsExitBusOracle) to enable processing.\t",
          "ownerDefinitions": [
            {
              "path": "$self.getMembers.addresses"
            }
          ],
          "timestamp": "2025-10-08T00:35:08.000Z"
        },
        {
          "functionName": "grantRole",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Grants a role within the contract to a specific address. This may allow addresses to execute any of the functions above related to the specific role.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE"
            }
          ],
          "timestamp": "2025-10-08T00:35:09.000Z"
        },
        {
          "functionName": "revokeRole",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Revokes a role for a specific address.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE"
            }
          ],
          "timestamp": "2025-10-08T00:35:10.000Z"
        }
      ]
    },
    "eth:0xC1d0b3DE6792Bf6b4b37EccdcC24e45978Cfd2Eb": {
      "functions": [
        {
          "functionName": "proxy__ossify",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Ossifies the proxy. This freezes the current implementation of the `LidoLocator` and effectively makes it non-upagreable by changing the proxy admin to the zero address.",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-06T14:28:13.029Z"
        },
        {
          "functionName": "proxy__changeAdmin",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Changes the proxy admin. The admin can update the entire implementation and logic of the `LidoLocator`.",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-06T14:28:48.677Z"
        },
        {
          "functionName": "proxy__upgradeTo",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Upgrades the implementation of the `LidoLocator`. This can change the entire logic of the contract including change ownership of funds locked in the contract, if any.\t",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-06T14:29:10.017Z"
        },
        {
          "functionName": "proxy__upgradeToAndCall",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Similar to _upgradeTo_, and then calls a function in the new contract.",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-06T14:30:30.496Z"
        }
      ]
    },
    "eth:0x06cd61045f958A209a0f8D746e103eCc625f4193": {
      "functions": [
        {
          "functionName": "proxy__ossify",
          "userClassification": "permissioned",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-08T14:06:47.587Z"
        },
        {
          "functionName": "proxy__changeAdmin",
          "userClassification": "permissioned",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-08T14:06:47.589Z"
        },
        {
          "functionName": "proxy__upgradeTo",
          "userClassification": "permissioned",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-08T14:06:47.596Z"
        },
        {
          "functionName": "proxy__upgradeToAndCall",
          "userClassification": "permissioned",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-08T14:06:47.597Z"
        }
      ]
    },
    "eth:0xDa22fA1CEa40d05Fe4CD536967afdD839586D546": {
      "functions": [
        {
          "functionName": "processExitDelayReport",
          "userClassification": "permissioned",
          "ownerDefinitions": [
            {
              "path": "$self.MODULE"
            }
          ],
          "timestamp": "2025-10-08T14:27:24.874Z"
        },
        {
          "functionName": "processStrikesReport",
          "userClassification": "permissioned",
          "ownerDefinitions": [
            {
              "path": "$self.STRIKES"
            }
          ],
          "timestamp": "2025-10-08T14:28:07.217Z"
        },
        {
          "functionName": "processTriggeredExit",
          "userClassification": "permissioned",
          "ownerDefinitions": [
            {
              "path": "$self.MODULE"
            }
          ],
          "timestamp": "2025-10-08T14:28:25.469Z"
        }
      ]
    },
    "eth:0xB9D7934878B5FB9610B3fE8A5e441e8fad7E293f": {
      "functions": [
        {
          "functionName": "proxy_upgradeTo",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Upgrades the implementation of the WithdrawalVault This can change the entire logic of the contract including change ownership of funds locked in the contract, if any.\t",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-08T14:45:56.984Z"
        },
        {
          "functionName": "proxy_changeAdmin",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Changes the proxy admin. The admin can update the entire implementation and logic of the WithdrawalVault.\t",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-08T14:46:08.811Z"
        }
      ]
    },
    "eth:0x7D2BAa6094E1C4B60Da4cbAF4A77C3f4694fD53D": {
      "functions": [
        {
          "functionName": "withdrawWithdrawals",
          "userClassification": "permissioned",
          "ownerDefinitions": [
            {
              "path": "$self.LIDO"
            }
          ],
          "timestamp": "2025-10-08T14:44:13.265Z"
        },
        {
          "functionName": "recoverERC20",
          "userClassification": "non-permissioned",
          "timestamp": "2025-10-08T14:44:13.266Z"
        },
        {
          "functionName": "recoverERC721",
          "userClassification": "non-permissioned",
          "timestamp": "2025-10-08T14:44:13.266Z"
        },
        {
          "functionName": "addWithdrawalRequests",
          "userClassification": "permissioned",
          "ownerDefinitions": [
            {
              "path": "$self.TRIGGERABLE_WITHDRAWALS_GATEWAY"
            }
          ],
          "timestamp": "2025-10-08T14:44:13.267Z"
        }
      ]
    },
    "eth:0x4d72BFF1BeaC69925F8Bd12526a39BAAb069e5Da": {
      "functions": [
        {
          "functionName": "proxy__ossify",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Ossifies the proxy. This freezes the current implementation of the CSAccounting and effectively makes it non-upagreable by changing the proxy admin to the zero address.\t",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-09T16:08:06.686Z"
        },
        {
          "functionName": "proxy__changeAdmin",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Changes the proxy admin. The admin can update the entire implementation and logic of the CSAccounting.\t",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-09T16:07:51.268Z"
        },
        {
          "functionName": "proxy__upgradeTo",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Upgrades the implementation of the CSAccounting This can change the entire logic of the contract including change ownership of funds locked in the contract, if any, or influence interaction with the rest of the protocol.\t",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-09T16:08:11.861Z"
        },
        {
          "functionName": "proxy__upgradeToAndCall",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Upgrades the implementation of the CSAccounting (similarly to proxy__upgradeTo), and then calls a function in the new contract.\t",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-09T16:08:23.930Z"
        }
      ]
    },
    "eth:0x6f09d2426c7405C5546413e6059F884D2D03f449": {
      "functions": [
        {
          "functionName": "resume",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Resumes all paused functions.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.RESUME_ROLE"
            }
          ],
          "timestamp": "2025-10-09T16:00:27.921Z"
        },
        {
          "functionName": "pauseFor",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Pauses deposits and rewards claims for a given amount of seconds.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.PAUSE_ROLE"
            }
          ],
          "timestamp": "2025-10-09T15:59:27.742Z"
        },
        {
          "functionName": "setChargePenaltyRecipient",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Sets the charge recipient. The address that will receive the withdrawal charge.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE.members"
            }
          ],
          "timestamp": "2025-10-09T16:02:21.345Z"
        },
        {
          "functionName": "setBondLockPeriod",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the period (in seconds) to retain the bond lock.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE.members"
            }
          ],
          "timestamp": "2025-10-09T16:02:11.156Z"
        },
        {
          "functionName": "addBondCurve",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Adds a new bond curve. Bond curves determine the price of a bond given the amount of validator keys a node operator has created.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_BOND_CURVES_ROLE"
            }
          ],
          "timestamp": "2025-10-09T15:51:14.611Z"
        },
        {
          "functionName": "updateBondCurve",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Updates an existing bond curve.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_BOND_CURVES_ROLE.members"
            }
          ],
          "timestamp": "2025-10-09T16:02:41.704Z"
        },
        {
          "functionName": "setBondCurve",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Sets the bond curve for a given node operator. This sets how much a node operator needs to deposit for bonds for each validator keys created.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.SET_BOND_CURVE_ROLE"
            }
          ],
          "timestamp": "2025-10-09T16:02:08.809Z"
        },
        {
          "functionName": "depositETH",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Stake ETH with Lido and deposit stETH to the a node operator's bond.\t",
          "ownerDefinitions": [
            {
              "path": "$self.MODULE"
            }
          ],
          "timestamp": "2025-10-09T15:52:11.687Z"
        },
        {
          "functionName": "depositStETH",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Deposit stETH to the a node operator's bond.\t",
          "ownerDefinitions": [
            {
              "path": "$self.MODULE"
            }
          ],
          "timestamp": "2025-10-09T15:52:26.023Z"
        },
        {
          "functionName": "depositWstETH",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Unwarps wstETH and deposit stETH to a node operator's bond.\t",
          "ownerDefinitions": [
            {
              "path": "$self.MODULE"
            }
          ],
          "timestamp": "2025-10-09T15:52:37.195Z"
        },
        {
          "functionName": "lockBondETH",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Locks an amount in ETH from a node operator's bond. (see CSModule)\t",
          "ownerDefinitions": [
            {
              "path": "$self.MODULE"
            }
          ],
          "timestamp": "2025-10-09T15:57:30.728Z"
        },
        {
          "functionName": "releaseLockedBondETH",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Releases a node operator's locked bond. (see CSModule)\t",
          "ownerDefinitions": [
            {
              "path": "$self.MODULE"
            }
          ],
          "timestamp": "2025-10-09T15:57:48.125Z"
        },
        {
          "functionName": "compensateLockedBondETH",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Compensates a locked bond for the given node operator (see CSModule)\t",
          "ownerDefinitions": [
            {
              "path": "$self.MODULE"
            }
          ],
          "timestamp": "2025-10-09T15:51:54.934Z"
        },
        {
          "functionName": "settleLockedBondETH",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Settle a locked bond for the given node operator. (see CSModule)\t",
          "ownerDefinitions": [
            {
              "path": "$self.MODULE"
            }
          ],
          "timestamp": "2025-10-09T15:58:14.199Z"
        },
        {
          "functionName": "penalize",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Penalize a bond by burning stETH shares of the node operator.\t",
          "ownerDefinitions": [
            {
              "path": "$self.MODULE"
            }
          ],
          "timestamp": "2025-10-09T15:58:34.173Z"
        },
        {
          "functionName": "chargeFee",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Charge a fee from the bond by transfering stETH to the charge recipient.\t",
          "ownerDefinitions": [
            {
              "path": "$self.MODULE"
            }
          ],
          "timestamp": "2025-10-09T15:51:35.781Z"
        },
        {
          "functionName": "recoverERC20",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Sends the amount of token for the specified ERC-20 to the caller.",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.RECOVERER_ROLE.members"
            }
          ],
          "timestamp": "2025-10-09T16:04:19.864Z"
        },
        {
          "functionName": "recoverStETHShares",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Recovers all stETH shares from the contract (except bonds).",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.RECOVERER_ROLE.members"
            }
          ],
          "timestamp": "2025-10-09T16:05:14.117Z"
        },
        {
          "functionName": "grantRole",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Grants a role within the contract to a given address. Roles may allow any address to manage bond curves and change the charge recipient. Contrary to the CSModule's design, the functions destined to be called by contracts (namely by the CSModule) cannot be hijacked as the CSModule's address used cannot be changed.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE.members"
            }
          ],
          "timestamp": "2025-10-09T16:06:18.562Z"
        },
        {
          "functionName": "revokeRole",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Revokes a role within the contract.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE.members"
            }
          ],
          "timestamp": "2025-10-09T16:06:37.902Z"
        }
      ]
    },
    "eth:0x2b33CF282f867A7FF693A66e11B0FcC5552e4425": {
      "functions": [
        {
          "functionName": "newAppInstance",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Creates a new upgradeable application instance by deploying the proxy. The instance has an app ID and will use the implementation contract (code logic) currently associated with this ID.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc].APP_MANAGER_ROLE"
            }
          ],
          "timestamp": "2025-10-08T16:16:03.134Z"
        },
        {
          "functionName": "newPinnedAppInstance",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Creates a new non-upgradeable (pinned) application instance. The instance has an app ID and will use the implementation contract (code logic) associated with this ID.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc].APP_MANAGER_ROLE"
            }
          ],
          "timestamp": "2025-10-08T16:17:43.679Z"
        },
        {
          "functionName": "setApp",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the implementation contract (code logic) that corresponds to a given namespace and app ID in the registry. All proxies in this namespace with this AppID will now point to this new implementation.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc].APP_MANAGER_ROLE"
            }
          ],
          "timestamp": "2025-10-08T16:15:38.344Z"
        },
        {
          "functionName": "setRecoveryVaultAppId",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Sets the recovery vault. A contract to recover assets if neeeded. The current vault is the Agent contract.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0xb8FFC3Cd6e7Cf5a098A1c92F48009765B24088Dc].APP_MANAGER_ROLE"
            }
          ],
          "timestamp": "2025-10-08T16:16:37.995Z"
        }
      ]
    },
    "eth:0xde3A93028F2283cc28756B3674BD657eaFB992f4": {
      "functions": [
        {
          "functionName": "mint",
          "userClassification": "permissioned",
          "checked": true,
          "score": "unscored",
          "description": "Mints a given amount of LDO token to a specified address.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[0xf73a1260d222f447210581DDf212D915c09a3249].MINT_ROLE"
            }
          ],
          "timestamp": "2025-10-08T16:27:58.298Z"
        },
        {
          "functionName": "issue",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Mints a given amount of LDO token to the TokenManager. This is used to create a treasury of tokens that can later be assigned.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[0xf73a1260d222f447210581DDf212D915c09a3249].ISSUE_ROLE"
            }
          ],
          "timestamp": "2025-10-08T16:26:56.132Z"
        },
        {
          "functionName": "assign",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Assigns a given amount of LDO tokens to a recipient. The tokens are directly taken out of the TokenManager and transferred to the recipient.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[0xf73a1260d222f447210581DDf212D915c09a3249].ASSIGN_ROLE"
            }
          ],
          "timestamp": "2025-10-08T16:25:14.434Z"
        },
        {
          "functionName": "burn",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Burns the given amount of LDO tokens of any given address. This allows this contract to burn any user's LDO tokens.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[0xf73a1260d222f447210581DDf212D915c09a3249].BURN_ROLE"
            }
          ],
          "timestamp": "2025-10-08T16:26:10.326Z"
        },
        {
          "functionName": "assignVested",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Assigns a given amount of LDO tokens to a recipient with a specific vesting plan. The full amount is transferred to the address but the LDO token is trusted to call the TokenManager upon each transfer and enforce the vesting plan. The plan can optionally contain a revokable flag which allows the manager to cancel the remaining locked tokens in a plan at any time before the plan expires.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[0xf73a1260d222f447210581DDf212D915c09a3249].ASSIGN_ROLE"
            }
          ],
          "timestamp": "2025-10-08T16:25:15.618Z"
        },
        {
          "functionName": "revokeVesting",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Revokes a user's vesting plan. This will cancel all the tokens that are still locked.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[0xf73a1260d222f447210581DDf212D915c09a3249].REVOKE_VESTINGS_ROLE"
            }
          ],
          "timestamp": "2025-10-08T16:29:18.966Z"
        },
        {
          "functionName": "forward",
          "userClassification": "non-permissioned",
          "checked": true,
          "score": "unscored",
          "description": "Runs an Aragon EVM script on behalf of a token holder. The token holder needs to have permission and the contract uses a blacklist to prevent the holder from executing actions on behalf of the TokenManager.\t",
          "ownerDefinitions": [],
          "timestamp": "2025-10-08T16:28:45.040Z"
        }
      ]
    },
    "eth:0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32": {
      "functions": [
        {
          "functionName": "changeController",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Changes the controller contract. The controller (currently TokenManager) can arbitrarily mint and burn LDO tokens from and to any user. This could put the governance and entire protocol at risk since LDO tokens are used to vote.\t",
          "ownerDefinitions": [
            {
              "path": "$self.controller"
            }
          ],
          "timestamp": "2025-10-08T16:32:53.157Z"
        },
        {
          "functionName": "generateTokens",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Generates (mints) new LDO to a specific address.\t",
          "ownerDefinitions": [
            {
              "path": "$self.controller"
            }
          ],
          "timestamp": "2025-10-08T16:32:26.125Z"
        },
        {
          "functionName": "destroyTokens",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Destroys (burns) LDO tokens from a given arbitrary address.\t",
          "ownerDefinitions": [
            {
              "path": "$self.controller"
            }
          ],
          "timestamp": "2025-10-08T16:32:39.777Z"
        },
        {
          "functionName": "enableTransfers",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Enables or disables transfer of LDO tokens.\t",
          "ownerDefinitions": [
            {
              "path": "$self.controller"
            }
          ],
          "timestamp": "2025-10-08T16:33:30.402Z"
        },
        {
          "functionName": "claimTokens",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Transfers any given token held in the contract to the TokenManager. This is meant to recover funds sent to the contract by mistake.\t",
          "ownerDefinitions": [
            {
              "path": "$self.controller"
            }
          ],
          "timestamp": "2025-10-08T16:33:14.732Z"
        }
      ]
    },
    "eth:0x17144556fd3424EDC8Fc8A4C940B2D04936d17eb": {
      "functions": [
        {
          "functionName": "pauseStaking",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Stops accepting new ETH deposits to the protocol. This ensures new funds do not enter the system without affecting other operations.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84].STAKING_PAUSE_ROLE"
            }
          ],
          "timestamp": "2025-10-09T17:28:09.280Z"
        },
        {
          "functionName": "resumeStaking",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Re-enables staking of new ETH into the contract.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84].STAKING_CONTROL_ROLE"
            }
          ],
          "timestamp": "2025-10-09T17:27:38.945Z"
        },
        {
          "functionName": "setStakingLimit",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Limits the rate and total stake of ETH allows into the contract. This is done by imposing a maximum stake limit and a rate of increase per block. This will prevent users from depositing additional ETH if the limit is reached.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84].STAKING_CONTROL_ROLE"
            }
          ],
          "timestamp": "2025-10-09T17:28:21.692Z"
        },
        {
          "functionName": "removeStakingLimit",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Removes the staking limit, allowing unlimited deposits.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84].STAKING_CONTROL_ROLE"
            }
          ],
          "timestamp": "2025-10-09T17:27:53.101Z"
        },
        {
          "functionName": "stop",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Stops all staking similarly to pauseStaking, and prevents transfer of stETH as well as beacone chain oracle submissions. This is a critical emergency function that completely halts the users' ability to enter and exit the system.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84].PAUSE_ROLE"
            }
          ],
          "timestamp": "2025-10-09T17:28:39.634Z"
        },
        {
          "functionName": "resume",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Resumes all operations paused after stop was called.\t",
          "ownerDefinitions": [
            {
              "path": "$self.kernel().accessControl.RESUME_ROLE.members"
            },
            {
              "path": "@acl.permissions[eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84].RESUME_ROLE"
            }
          ],
          "timestamp": "2025-10-09T17:28:51.443Z"
        },
        {
          "functionName": "unsafeChangeDepositedValidators",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Unsafely changes the deposited validators counter. This may be used to onboard external validators to Lido. This is function could dangerously change the accounting metrics in Lido as it changes a parameter without any safeguards. Such a change could artificially inflate or deflate the value of stETH or manipulate the expected returns calculation.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84].UNSAFE_CHANGE_DEPOSITED_VALIDATORS_ROLE"
            }
          ],
          "timestamp": "2025-10-09T17:28:17.408Z"
        },
        {
          "functionName": "transferToVault",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Default recovery function in Aragon Apps. Irreversably disabled.\t",
          "ownerDefinitions": [
            {
              "path": "0x0"
            }
          ],
          "timestamp": "2025-10-09T16:10:16.817Z"
        },
        {
          "functionName": "receiveELRewards",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "A function to allow the rewards vault to send rewards to this contract without them being considered user deposits.\t",
          "ownerDefinitions": [
            {
              "path": "@getLidoLocator.elRewardsVault"
            }
          ],
          "timestamp": "2025-10-09T16:20:58.726Z"
        },
        {
          "functionName": "receiveWithdrawals",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "A function to allow the WithdrawalVault to receive funds from exited validators without them being considered user deposits.\t",
          "ownerDefinitions": [
            {
              "path": "@getLidoLocator.withdrawalVault"
            }
          ],
          "timestamp": "2025-10-09T16:22:33.790Z"
        },
        {
          "functionName": "handleOracleReport",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Handles the oracle data and takes a series of actions accordingly. Actions include process withdrawals, burning shares, distribute rewards, and rebase tokens. Malicious or wrong data reporting could lead to accounting errors and potential loss of user funds and unclaimed yield.\t",
          "ownerDefinitions": [
            {
              "path": "@getLidoLocator.accountingOracle"
            }
          ],
          "timestamp": "2025-10-09T16:25:50.042Z"
        },
        {
          "functionName": "deposit",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Deposits a multiple of DEPOSIT_SIZE ETH into the ethereum staking contract to create a new validator. This can only be called by the DepositSecurityModule which will make sure the call reverts if the state of the deposit contract has changed between the submission and execution of the deposit.\t",
          "ownerDefinitions": [
            {
              "path": "@getLidoLocator.depositSecurityModule"
            }
          ],
          "timestamp": "2025-10-09T16:27:33.055Z"
        }
      ]
    },
    "eth:0x23E0B465633FF5178808F4A75186E2F2F9537021": {
      "functions": [
        {
          "functionName": "execute",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Allows the contract owner to execute external function calls on target contracts, optionally transferring ether. The purpose of this function is to execute governance decision, in particular, it has the permission to execute calls throught the Agent contract, controlling the entire Lido protocol.",
          "ownerDefinitions": [
            {
              "path": "$self.owner"
            }
          ],
          "timestamp": "2025-10-10T01:06:19.062Z"
        },
        {
          "functionName": "renounceOwnership",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "This changes the owner of the contract to the zero address, preventing any further _execute_ calls. If at the time of use this contract is still the only allowed caller of the Agent, this could render the protocol immutable.",
          "ownerDefinitions": [
            {
              "path": "$self.owner"
            }
          ],
          "timestamp": "2025-10-10T01:08:00.586Z"
        },
        {
          "functionName": "transferOwnership",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Transfer the ownership of the contract to an other address. The address will have the right to call _execute_, potentially making any action in the protocol.",
          "ownerDefinitions": [
            {
              "path": "$self.owner"
            }
          ],
          "timestamp": "2025-10-10T01:08:46.624Z"
        }
      ]
    },
    "eth:0xCE0425301C85c5Ea2A0873A2dEe44d78E02D2316": {
      "functions": [
        {
          "functionName": "submit",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Submits a new proposal that can execute a series of calls in the name of the governance, the proposal needs to be scheduled for execution.",
          "ownerDefinitions": [
            {
              "path": "$self.getGovernance"
            }
          ],
          "timestamp": "2025-10-13T15:55:11.042Z"
        },
        {
          "functionName": "schedule",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Schedules a proposal for execution, the proposal can be executed once the schedule delay has passed, if it was not cancelled by the DAO.",
          "ownerDefinitions": [
            {
              "path": "$self.getGovernance"
            }
          ],
          "timestamp": "2025-10-13T15:57:50.281Z"
        },
        {
          "functionName": "cancelAllNonExecutedProposals",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Cancels all proposals that haven't been executed and prevents them from being executed in the future. The DualGovernance contract currently limits the calls to this function only to the state \"vetoSignalling\" or \"vetoSignallingDeactivation\", through a proposal.",
          "ownerDefinitions": [
            {
              "path": "$self.getGovernance"
            }
          ],
          "timestamp": "2025-10-11T19:49:17.099Z"
        },
        {
          "functionName": "setGovernance",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the address of the governance contract in use. The governance contract can submit and schedule proposals.",
          "ownerDefinitions": [
            {
              "path": "$self.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-13T15:53:39.844Z"
        },
        {
          "functionName": "setAfterSubmitDelay",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the delay period after a proposal is submitted before it can be scheduled for execution. The current delay is 72 hours and is capped at 720 hours.",
          "ownerDefinitions": [
            {
              "path": "$self.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-12T22:58:01.259Z"
        },
        {
          "functionName": "setAfterScheduleDelay",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the delay that needs to pass once a proposal has been scheduled, before it can be executed. There is a hardcoded limit of 240 hours, the current delay is 24 hours.",
          "ownerDefinitions": [
            {
              "path": "$self.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-12T22:57:31.196Z"
        },
        {
          "functionName": "transferExecutorOwnership",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Transfers the ownership of the executor contract to a new address. The owner of the executor can execute any proposal through that contract, which given the current permission assignment could include any Lido governance proposal.",
          "ownerDefinitions": [
            {
              "path": "$self.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-13T15:56:50.620Z"
        },
        {
          "functionName": "setEmergencyProtectionActivationCommittee",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the emergency activation committee, the committee with the right to activate the emergency mode.",
          "ownerDefinitions": [
            {
              "path": "$self.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-13T15:48:59.205Z"
        },
        {
          "functionName": "setEmergencyProtectionExecutionCommittee",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the emergency protection execution committee. Once the emergency mode is enabled, this committee can execute any proposal.",
          "ownerDefinitions": [
            {
              "path": "$self.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-13T15:52:31.696Z"
        },
        {
          "functionName": "setEmergencyProtectionEndDate",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the end date of the emergency protection. Past this date the emergency activation committee can no longer activate the emergency mode. The current date is June 20th, 2026.",
          "ownerDefinitions": [
            {
              "path": "$self.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-13T15:51:47.818Z"
        },
        {
          "functionName": "setEmergencyModeDuration",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the duration of the emergency mode. The current duration is 30 days and the value is capped at 365 days.",
          "ownerDefinitions": [
            {
              "path": "$self.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-13T14:52:04.421Z"
        },
        {
          "functionName": "setEmergencyGovernance",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the address of the emergency governance, this is the governance that may be activated by the emergency committee.",
          "ownerDefinitions": [
            {
              "path": "$self.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-13T14:50:43.297Z"
        },
        {
          "functionName": "activateEmergencyMode",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Function that activates the emergency mode. The emergency mode can only be activated once and before a set timestamp after which it expires. In the emergency mode, the committee can perform two actions: pass proposals (any), or disable de Dual Governance (and go back to the previous model). This mode is meant as a protection in case of an adversarial proposalthat would exploit a bug in the Dual Governance contracts.",
          "ownerDefinitions": [
            {
              "path": "$self.getEmergencyActivationCommittee"
            }
          ],
          "timestamp": "2025-10-11T19:45:14.208Z"
        },
        {
          "functionName": "emergencyExecute",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Executes any proposal if the activation mode is activated and the proposal is from the emergency committee.",
          "ownerDefinitions": [
            {
              "path": "$self.getEmergencyActivationCommittee"
            }
          ],
          "timestamp": "2025-10-11T19:50:16.145Z"
        },
        {
          "functionName": "deactivateEmergencyMode",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Cancels all pending proposals and deactivates the emergency mode. If the emergency mode duration delay has passed, anyone can call this function.",
          "ownerDefinitions": [
            {
              "path": "$self.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-13T16:00:38.071Z"
        },
        {
          "functionName": "emergencyReset",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Resets the system after it entered emergency mode. This cancels all proposals, deactivates emergency mode, and sets the emergency governance as acting governance.",
          "ownerDefinitions": [
            {
              "path": "$self.getEmergencyActivationCommittee"
            }
          ],
          "timestamp": "2025-10-13T15:59:04.614Z"
        },
        {
          "functionName": "setAdminExecutor",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets a new address for the admin executor contract. The admin executor holds critical administrative permissions in the governance, and should always be grantedto an address subject to the governance process (a \"proposer\").",
          "ownerDefinitions": [
            {
              "path": "$self.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-12T22:49:52.073Z"
        }
      ]
    },
    "eth:0x553337946F2FAb8911774b20025fa776B76a7CcE": {
      "functions": [
        {
          "functionName": "cancelAllPendingProposals",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Cancels all pending proposals that have not been executed.",
          "ownerDefinitions": [
            {
              "path": "$self.GOVERNANCE"
            }
          ],
          "timestamp": "2025-10-13T16:04:25.946Z"
        },
        {
          "functionName": "scheduleProposal",
          "userClassification": "non-permissioned",
          "checked": false,
          "score": "unscored",
          "description": "",
          "ownerDefinitions": [],
          "timestamp": "2025-10-13T16:05:46.937Z"
        },
        {
          "functionName": "submitProposal",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Submits a transaction from the Lido governance to the timelock, this proposal can eventually be executed after the mandatory delays, if not cancelled.",
          "ownerDefinitions": [
            {
              "path": "$self.GOVERNANCE"
            }
          ],
          "timestamp": "2025-10-13T16:05:49.260Z"
        }
      ]
    },
    "eth:0xf165148978Fa3cE74d76043f833463c340CFB704": {
      "functions": [
        {
          "functionName": "changeSupportRequiredPct",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Changes the required percentage of \"yes\" votes for a proposal to pass. The number has to be greater or equal than the quorum and less than 100%.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].MODIFY_SUPPORT_ROLE"
            }
          ],
          "timestamp": "2025-10-13T17:19:40.265Z"
        },
        {
          "functionName": "changeMinAcceptQuorumPct",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Changes the minimum quorum required for a proposal to pass. This is the percentage of \"yes\" votes in regard to the total voting power. The new value has to be less or equal than the support percentage.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].MODIFY_QUORUM_ROLE"
            }
          ],
          "timestamp": "2025-10-13T17:19:46.203Z"
        },
        {
          "functionName": "unsafelyChangeVoteTime",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Changes the total duration of voting. This affects all existing unexecuted votes. The new value has to be greater than the objection time and will effectively change the main voting period. The main voting period is the time before objection during which users can vote \"yes\" or \"no\" for proposals. If the new time is smaller than the passed time on existing proposals this would fast forward the proposals to the objection or closed phase.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].UNSAFELY_MODIFY_VOTE_TIME_ROLE"
            }
          ],
          "timestamp": "2025-10-13T17:17:25.856Z"
        },
        {
          "functionName": "unsafelyChangeObjectionPhaseTime",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Changes the duration of the objection phase. This affects all existing unexecuted votes and could be used to remove, fast forward, or extend the objection phase on existing and future proposals. The new value has to be less than the total vote time.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].UNSAFELY_MODIFY_VOTE_TIME_ROLE"
            }
          ],
          "timestamp": "2025-10-13T17:18:27.211Z"
        },
        {
          "functionName": "newVote",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Creates a proposal with an associated execution script and description metadata. If the proposal is accepted the script will be executed and could perform any action that the Voting contract is allowed to do.\t",
          "ownerDefinitions": [
            {
              "path": "@acl.permissions[eth:0x2e59A20f205bB85a89C53f1936454680651E618e].CREATE_VOTES_ROLE"
            }
          ],
          "timestamp": "2025-10-13T17:20:33.618Z"
        },
        {
          "functionName": "forward",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Similar to newVote but without any description metadata. This is meant to be called as a result of other governance processes or smart contracts.\t",
          "ownerDefinitions": [
            {
              "path": "$self"
            }
          ],
          "timestamp": "2025-10-13T17:22:28.078Z"
        }
      ]
    },
    "eth:0xFdDf38947aFB03C621C71b06C9C70bce73f12999": {
      "functions": [
        {
          "functionName": "proxy__ossify",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Ossifies the proxy. This freezes the current implementation of the StakingRouter and effectively makes it non-upagreable by changing the proxy admin to the zero address.\t",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-13T17:57:55.194Z"
        },
        {
          "functionName": "proxy__changeAdmin",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Changes the proxy admin. The admin can update the entire implementation and logic of the StakingRouter.\t",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-13T17:58:06.997Z"
        },
        {
          "functionName": "proxy__upgradeTo",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Upgrades the implementation of the StakingRouter This can change the entire logic of the contract including change ownership of funds locked in the contract, if any.\t",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-13T17:58:15.074Z"
        },
        {
          "functionName": "proxy__upgradeToAndCall",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Upgrades the implementation of the StakingRouter (similarly to _proxy__upgradeTo _), and then calls a function in the new contract.\t",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-13T17:58:24.292Z"
        }
      ]
    },
    "eth:0x226f9265CBC37231882b7409658C18bB7738173A": {
      "functions": [
        {
          "functionName": "initialize",
          "userClassification": "non-permissioned",
          "ownerDefinitions": [
            {
              "path": "$self"
            }
          ],
          "timestamp": "2025-10-13T18:15:13.890Z"
        },
        {
          "functionName": "finalizeUpgrade_v3",
          "userClassification": "non-permissioned",
          "ownerDefinitions": [
            {
              "path": "$self"
            }
          ],
          "timestamp": "2025-10-13T18:13:37.172Z"
        },
        {
          "functionName": "addStakingModule",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Registers a staking module specifying a name, contract, fee settings, and limits on the shares and validators. The new module can receive ETH deposits. Adding a malicious staking modules could lead to the loss of vunds allocated to new deposits.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.STAKING_MODULE_MANAGE_ROLE.members"
            }
          ],
          "timestamp": "2025-10-13T18:12:48.954Z"
        },
        {
          "functionName": "updateStakingModule",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Updates the settings of an existing Staking Module. This can change the fees or the limits set on deposits and staking shares.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.STAKING_MODULE_MANAGE_ROLE.members"
            }
          ],
          "timestamp": "2025-10-13T18:28:49.597Z"
        },
        {
          "functionName": "updateTargetValidatorsLimits",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "For a specific node operator in a specific staking module, updates the limit of the validators that can be used for deposit.",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.STAKING_MODULE_MANAGE_ROLE.members"
            }
          ],
          "timestamp": "2025-10-13T18:33:29.907Z"
        },
        {
          "functionName": "reportRewardsMinted",
          "userClassification": "permissioned",
          "checked": true,
          "score": "medium-risk",
          "description": "Reports rewards that have been minted and notifies each module of the rewards they received by calling a dedicated function in the respective module's contract.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.REPORT_REWARDS_MINTED_ROLE.members"
            }
          ],
          "timestamp": "2025-10-13T18:17:16.797Z"
        },
        {
          "functionName": "updateExitedValidatorsCountByStakingModule",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Updates the total numbers of exited validators for each module. This is used to determine and confirm the number of active validators.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.REPORT_EXITED_VALIDATORS_ROLE.members"
            }
          ],
          "timestamp": "2025-10-13T18:18:25.351Z"
        },
        {
          "functionName": "reportStakingModuleExitedValidatorsCountByNodeOperator",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "For a specific staking module, reports the total number of exited validators for each node operator.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.REPORT_EXITED_VALIDATORS_ROLE.members"
            }
          ],
          "timestamp": "2025-10-13T18:17:57.134Z"
        },
        {
          "functionName": "unsafeSetExitedValidatorsCount",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Overrides the number of exited validators for a given node operator in a given staking module, without any safety check. This function cannot be called from the current AccountingOracle, but the Oracle could be upgraded to a version which can call this function if it isn't ossified.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.UNSAFE_SET_EXITED_VALIDATORS_ROLE"
            }
          ],
          "timestamp": "2025-10-13T18:20:41.752Z"
        },
        {
          "functionName": "onValidatorsCountsByNodeOperatorReportingFinished",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Called when the reporting of exited and stuck validators is over. This function will call the different staking modules to update their data.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.REPORT_EXITED_VALIDATORS_ROLE.members"
            }
          ],
          "timestamp": "2025-10-13T18:16:32.806Z"
        },
        {
          "functionName": "decreaseStakingModuleVettedKeysCountByNodeOperator",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Reduces the number of validators a specific node operator can run. This doesn't affect existing validators but may prevent the node operators to create new validators if it has reached the new limit count.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.STAKING_MODULE_UNVETTING_ROLE.members"
            }
          ],
          "timestamp": "2025-10-13T18:13:26.754Z"
        },
        {
          "functionName": "setStakingModuleStatus",
          "userClassification": "permissioned",
          "checked": true,
          "score": "medium-risk",
          "description": "Changes the status of a staking module. Modules may be Active, Paused, or Stopped. When Paused no more deposits can be added but the rewards are still distributed. If stopped no more deposits can be added and the rewards go to the protocol treasury instead.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.STAKING_MODULE_MANAGE_ROLE.members"
            }
          ],
          "timestamp": "2025-10-13T18:23:21.531Z"
        },
        {
          "functionName": "setWithdrawalCredentials",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the withdraw credentials of each module. The credentials are used to withdraw ETH on the Consensus Layer side. No address currently has the permission to change those credentials.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_WITHDRAWAL_CREDENTIALS_ROLE"
            }
          ],
          "timestamp": "2025-10-13T18:22:33.747Z"
        },
        {
          "functionName": "reportValidatorExitDelay",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Handles tracking and penalization logic for a node operator who failed to exit their validator within the defined exit window. The information is simply forwarded to the staking module which contains the logic and possible penalties.",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.REPORT_VALIDATOR_EXITING_STATUS_ROLE.members"
            }
          ],
          "timestamp": "2025-10-13T18:27:05.382Z"
        },
        {
          "functionName": "onValidatorExitTriggered",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Handles the triggerable exit event for a set of validators. This function will forward the call to the corresponding staking module, different modules can interpret and treat the information differently.",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.REPORT_VALIDATOR_EXIT_TRIGGERED_ROLE.members"
            }
          ],
          "timestamp": "2025-10-13T18:25:42.516Z"
        },
        {
          "functionName": "deposit",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Deposits ETH to create validators in a given staking module. The staking module is specified by the Lido contract which is the only possible caller, and the underlaying staking module constract specifies the node operator public keys.\t",
          "ownerDefinitions": [
            {
              "path": "$self.getLido"
            }
          ],
          "timestamp": "2025-10-13T18:15:06.751Z"
        },
        {
          "functionName": "grantRole",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Grants a role within the contract. Roles are used to handle the access control of all functions above. Granting a role to a malicious actor could put lead to the hijack of deposited funds.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE"
            }
          ],
          "timestamp": "2025-10-13T18:34:33.612Z"
        },
        {
          "functionName": "revokeRole",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Revokes a role from a specific address.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE"
            }
          ],
          "timestamp": "2025-10-13T18:34:57.879Z"
        }
      ]
    },
    "eth:0x852deD011285fe67063a08005c71a85690503Cee": {
      "functions": [
        {
          "functionName": "proxy__ossify",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Ossifies the proxy. This freezes the current implementation of the AccountingOracle and effectively makes it non-upagreable by changing the proxy admin to the zero address.\t",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-13T18:40:30.872Z"
        },
        {
          "functionName": "proxy__changeAdmin",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Changes the proxy admin. The admin can update the entire implementation and logic of the AccountingOracle.\t",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-13T18:40:40.617Z"
        },
        {
          "functionName": "proxy__upgradeTo",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Upgrades the implementation of the AccountingOracle This can change the entire logic of the contract including change ownership of funds locked in the contract, if any.\t",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-13T18:40:51.410Z"
        },
        {
          "functionName": "proxy__upgradeToAndCall",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Upgrades the implementation of the AccountingOracle (similarly to _proxy__upgradeTo _), and then calls a function in the new contract.\t",
          "ownerDefinitions": [
            {
              "path": "$self.$admin"
            }
          ],
          "timestamp": "2025-10-13T18:40:58.090Z"
        }
      ]
    },
    "eth:0xE9906E543274cebcd335d2C560094089e9547e8d": {
      "functions": [
        {
          "functionName": "initialize",
          "userClassification": "non-permissioned",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE.members"
            }
          ],
          "timestamp": "2025-10-13T18:41:05.768Z"
        },
        {
          "functionName": "initializeWithoutMigration",
          "userClassification": "non-permissioned",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE.members"
            }
          ],
          "timestamp": "2025-10-13T18:41:07.230Z"
        },
        {
          "functionName": "finalizeUpgrade_v2",
          "userClassification": "non-permissioned",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE.members"
            }
          ],
          "timestamp": "2025-10-13T18:41:01.396Z"
        },
        {
          "functionName": "finalizeUpgrade_v3",
          "userClassification": "non-permissioned",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE.members"
            }
          ],
          "timestamp": "2025-10-13T18:41:01.997Z"
        },
        {
          "functionName": "submitReportData",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Submits a report for a given reference slot on the beacon chain. This report includes information on the number of Lido validators on the consensus layer, their cumulative balance, exited validators, balance of the rewards and withdrawal vaults, and the simulated share rate (total ether / all shares emitted). This information is then processed and transmitted to other Lido contracts. It will influence how shares are rebased and whether validators will be exited/created in future slots. The report of wrong data could therefore lead to the loss of unclaimed yield or loss of user funds.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.SUBMIT_DATA_ROLE.members"
            },
            {
              "path": "@getConsensusContract.getMembers.addresses"
            }
          ],
          "timestamp": "2025-10-13T18:46:25.997Z"
        },
        {
          "functionName": "submitReportExtraDataEmpty",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Informs that no extra data is submitted for the given slot.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.SUBMIT_DATA_ROLE.members"
            },
            {
              "path": "@getConsensusContract.getMembers.addresses"
            }
          ],
          "timestamp": "2025-10-13T18:47:03.041Z"
        },
        {
          "functionName": "submitReportExtraDataList",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Submits extra data for a slot. This allows the consensus committee to compute the extra data asynchronously and report it later than the main report data. If the deadline has passed or the next report has started then no more extra data can be added for a slot.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.SUBMIT_DATA_ROLE.members"
            },
            {
              "path": "@getConsensusContract.getMembers.addresses"
            }
          ],
          "timestamp": "2025-10-13T18:47:25.923Z"
        },
        {
          "functionName": "revokeRole",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Revokes a role for a specific address.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE"
            }
          ],
          "timestamp": "2025-10-13T18:50:23.193Z"
        },
        {
          "functionName": "grantRole",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Grants a role within the contract to a specific address. There are roles to allow the management of the consensus contract or the right to submit data. None of these role are currently in use.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.DEFAULT_ADMIN_ROLE"
            }
          ],
          "timestamp": "2025-10-13T18:49:54.780Z"
        },
        {
          "functionName": "setConsensusContract",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the consensus contract to use. The consensus contract is currently HashConsensus, it can decide who is a committee member and push the consensus proof to the AccountingOracle.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_CONSENSUS_CONTRACT_ROLE"
            }
          ],
          "timestamp": "2025-10-13T18:49:25.080Z"
        },
        {
          "functionName": "setConsensusVersion",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the current consensus version used. The version refers to a set of rules that the members must agree on when building the report.\t",
          "ownerDefinitions": [
            {
              "path": "$self.accessControl.MANAGE_CONSENSUS_VERSION_ROLE"
            }
          ],
          "timestamp": "2025-10-13T18:50:51.674Z"
        },
        {
          "functionName": "submitConsensusReport",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Pushes the hash of the report built by the consensus committee. This ensures that the data reported and processed matches the consensus.\t",
          "ownerDefinitions": [
            {
              "path": "$self.getConsensusContract"
            }
          ],
          "timestamp": "2025-10-13T18:48:03.330Z"
        },
        {
          "functionName": "discardConsensusReport",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Discards the report for the current slot. This can only be called when (all conditions met): a consensus was pushed, the processing hasn't started, the deadline is not expired, and there is no consensus to replace the current one. This may happen if a member changers their report, is moved from the set, or the quorum value gets increased.\t",
          "ownerDefinitions": [
            {
              "path": "$self.getConsensusContract"
            }
          ],
          "timestamp": "2025-10-13T18:48:40.216Z"
        }
      ]
    },
    "eth:0xC1db28B3301331277e307FDCfF8DE28242A4486E": {
      "functions": [
        {
          "functionName": "setConfigProvider",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the address of the config provider. The config provider holds critical parameters of the dual governance, such as delays, locking period, and support levels required for the dual governance functionality (veto from stETH holders).",
          "ownerDefinitions": [
            {
              "path": "@TIMELOCK.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-13T21:36:44.440Z"
        },
        {
          "functionName": "setProposalsCanceller",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Updates the address of the proposals canceller authorized to cancel pending proposals. This is currently set to the DAO voting systems but could also be assigned to a contract with additional logic.",
          "ownerDefinitions": [
            {
              "path": "@TIMELOCK.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-13T21:26:38.634Z"
        },
        {
          "functionName": "registerProposer",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Registers the proposerAccount address in the system as a valid proposer and associates it with the executor contract address. Currently the only proposer is the Lido Governance contract (Voting), associated with the current admin Executor contract.",
          "ownerDefinitions": [
            {
              "path": "@TIMELOCK.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-13T21:07:19.533Z"
        },
        {
          "functionName": "setProposerExecutor",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Updates the executor contract associated with a given proposer. ",
          "ownerDefinitions": [
            {
              "path": "@TIMELOCK.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-13T21:25:36.202Z"
        },
        {
          "functionName": "unregisterProposer",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Unregisters a proposer, a contract allowed to submit proposals.",
          "ownerDefinitions": [
            {
              "path": "@TIMELOCK.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-13T21:29:10.651Z"
        },
        {
          "functionName": "addTiebreakerSealableWithdrawalBlocker",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Adds a unique address of a sealable contract that can be paused and may cause a Dual Governance tie (deadlock). A tie may occur when user withdrawal requests cannot be processed due to the paused state of a registered sealable withdrawal blocker while the Dual Governance system is in the RageQuit state. This contract could then be paused (sealed), by the reseal committee, and potentially unsealed by the tiebreaker committee.",
          "ownerDefinitions": [
            {
              "path": "@TIMELOCK.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-13T21:37:56.823Z"
        },
        {
          "functionName": "removeTiebreakerSealableWithdrawalBlocker",
          "userClassification": "permissioned",
          "checked": true,
          "score": "low-risk",
          "description": "Removes a previously registered sealableWithdrawalBlocker contract from the system. (see addTiebreakerSealableWithdrawalBlocker). \n\n",
          "ownerDefinitions": [
            {
              "path": "@TIMELOCK.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-13T21:38:30.281Z"
        },
        {
          "functionName": "setTiebreakerCommittee",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the address of the tie breaker committee. The committee can, in the unique condition of a deadlock in the governance process (stuck in rage quit mode):\n - Schedule any pending proposal for execution\n - Unpause (unseal) any sealable contract using \"tieBreakerResumeSealable\"\n\nThose can only be performed once the delay \"tiebreaker activation timeout\" has passed.",
          "ownerDefinitions": [
            {
              "path": "@TIMELOCK.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-13T21:16:56.564Z"
        },
        {
          "functionName": "setTiebreakerActivationTimeout",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the tiebreaker activatioin timeout. This is the delay before which the tiebreaker committee can perform any action, once it's activated.",
          "ownerDefinitions": [
            {
              "path": "@TIMELOCK.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-13T21:17:25.731Z"
        },
        {
          "functionName": "setResealCommittee",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the address of the reseal committee.\n\n",
          "ownerDefinitions": [
            {
              "path": "@TIMELOCK.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-13T21:24:39.204Z"
        },
        {
          "functionName": "setResealManager",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Sets the address of the Reseal Manager contract.\n\n",
          "ownerDefinitions": [
            {
              "path": "@TIMELOCK.getAdminExecutor"
            }
          ],
          "timestamp": "2025-10-13T21:24:03.134Z"
        },
        {
          "functionName": "tiebreakerScheduleProposal",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Allows the Tiebreaker committee to instruct the EmergencyProtectedTimelock singleton instance to schedule a submitted and non-cancelled proposal for execution. This can only be called if the governance is in deadlock and the mandatory timeout has passed since the activation of the tiebreaker committee.",
          "ownerDefinitions": [
            {
              "path": "$self.getTiebreakerDetails.tiebreakerCommittee"
            }
          ],
          "timestamp": "2025-10-13T21:19:15.499Z"
        },
        {
          "functionName": "tiebreakerResumeSealable",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Allows the Tiebreaker committee to resume a paused sealable contract when the system is in a tie state.\n\n",
          "ownerDefinitions": [
            {
              "path": "$self.getTiebreakerDetails.tiebreakerCommittee"
            }
          ],
          "timestamp": "2025-10-13T21:21:10.012Z"
        },
        {
          "functionName": "resealSealable",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Allows the reseal committee to \"reseal\" (pause indefinitely) an instance of a sealable contract that is currently paused for a limited duration. This is done using the ResealManager contract.",
          "ownerDefinitions": [
            {
              "path": "$self.getResealCommittee"
            }
          ],
          "timestamp": "2025-10-13T21:22:44.448Z"
        },
        {
          "functionName": "cancelAllPendingProposals",
          "userClassification": "non-permissioned",
          "score": "unscored",
          "timestamp": "2025-10-13T21:23:58.863Z"
        },
        {
          "functionName": "submitProposal",
          "userClassification": "permissioned",
          "checked": true,
          "score": "high-risk",
          "description": "Instructs the EmergencyProtectedTimelock singleton instance to register a new governance proposal. The proposal will be executed by an executor contract associated with the proposer address calling this function at the moment of submission. This starts a dynamic timelock on scheduling the proposal for execution.",
          "ownerDefinitions": [
            {
              "path": "$self.getProposers[0].account"
            }
          ],
          "timestamp": "2025-10-13T21:31:42.769Z"
        },
        {
          "functionName": "scheduleProposal",
          "userClassification": "non-permissioned",
          "score": "unscored",
          "timestamp": "2025-10-13T21:31:13.236Z"
        }
      ]
    }
  }
}