{
  "name": "uniswap-v2",
  "timestamp": 1758824267,
  "configHash": "0xa81b4b14ddaaa6222bd7149cb61b99ef5da0c86cc29d3a5868d14524935670ff",
  "entries": [
    {
      "name": "UniswapV2Pair",
      "address": "eth:0x0C722a487876989Af8a05FFfB6e32e45cc23FB3A",
      "type": "Contract",
      "sourceHashes": [
        "0x19473b16ed0e47720e0d06f8d577db7101eb63838abdb25f901b8bdb06b9723d"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1608363808,
      "sinceBlock": 11482353,
      "values": {
        "$immutable": true,
        "decimals": 18,
        "DOMAIN_SEPARATOR": "0x98d4d4ee01d4b009b73734117d1d3e83ad6ebcb6011b8223b302ede85320556c",
        "factory": "eth:0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
        "getReserves": {
          "_reserve0": "18500410857408479258970",
          "_reserve1": "53138295511511835937",
          "_blockTimestampLast": 1758823799
        },
        "kLast": 0,
        "MINIMUM_LIQUIDITY": 1000,
        "name": "Uniswap V2",
        "PERMIT_TYPEHASH": "0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
        "price0CumulativeLast": "eth:0x8396481631547325952473557086543898968445",
        "price1CumulativeLast": "341875816095943109053449126032799933714520756",
        "symbol": "UNI-V2",
        "token0": "eth:0x77777FeDdddFfC19Ff86DB637967013e6C6A116C",
        "token1": "eth:0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "totalSupply": "172448554035183112602",
        "writeFunctionPermissions": [
          {
            "function": "approve",
            "signature": "function approve(address spender, uint value)",
            "file": "UniswapV2Pair.sol",
            "permissionType": "none",
            "category": "other"
          },
          {
            "function": "burn",
            "signature": "function burn(address to)",
            "file": "UniswapV2Pair.sol",
            "permissionType": "none",
            "category": "financial",
            "requireStatementCount": 2
          },
          {
            "function": "initialize",
            "signature": "function initialize(address, address)",
            "file": "UniswapV2Pair.sol",
            "permissionType": "none",
            "category": "other",
            "requireStatementCount": 3
          },
          {
            "function": "mint",
            "signature": "function mint(address to)",
            "file": "UniswapV2Pair.sol",
            "permissionType": "none",
            "category": "financial",
            "requireStatementCount": 1
          },
          {
            "function": "permit",
            "signature": "function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s)",
            "file": "UniswapV2Pair.sol",
            "permissionType": "none",
            "category": "other"
          },
          {
            "function": "skim",
            "signature": "function skim(address to)",
            "file": "UniswapV2Pair.sol",
            "permissionType": "none",
            "category": "financial",
            "requireStatementCount": 3
          },
          {
            "function": "swap",
            "signature": "function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data)",
            "file": "UniswapV2Pair.sol",
            "permissionType": "none",
            "category": "other",
            "requireStatementCount": 2
          },
          {
            "function": "sync",
            "signature": "function sync()",
            "file": "UniswapV2Pair.sol",
            "permissionType": "none",
            "category": "other",
            "requireStatementCount": 3
          },
          {
            "function": "transfer",
            "signature": "function transfer(address to, uint value)",
            "file": "UniswapV2Pair.sol",
            "permissionType": "none",
            "category": "financial"
          },
          {
            "function": "transferFrom",
            "signature": "function transferFrom(address from, address to, uint value)",
            "file": "UniswapV2Pair.sol",
            "permissionType": "none",
            "category": "financial"
          }
        ]
      },
      "implementationNames": {
        "eth:0x0C722a487876989Af8a05FFfB6e32e45cc23FB3A": "UniswapV2Pair"
      }
    },
    {
      "name": "FeeToSetter",
      "address": "eth:0x18e433c7Bf8A2E1d0197CE5d8f9AFAda1A771360",
      "type": "Contract",
      "sourceHashes": [
        "0xfffdaf0f5ead5d72797508adfe29cc626ceb34dc10c364f7c407716dfbbee6db"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1600286876,
      "sinceBlock": 10875204,
      "values": {
        "$immutable": true,
        "factory": "eth:0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
        "feeTo": "eth:0xDAF819c2437a82f9e01f6586207ebF961a7f0970",
        "owner": "eth:0x1a9C8182C09F50C8318d769245beA52c32BE35BC",
        "vestingEnd": 1614556800,
        "writeFunctionPermissions": [
          {
            "function": "setFeeToSetter",
            "signature": "function setFeeToSetter(address feeToSetter_)",
            "file": "FeeToSetter.sol",
            "permissionType": "msgSender",
            "category": "administrative",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 4
          },
          {
            "function": "setOwner",
            "signature": "function setOwner(address owner_)",
            "file": "FeeToSetter.sol",
            "permissionType": "msgSender",
            "category": "administrative",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 5
          },
          {
            "function": "toggleFees",
            "signature": "function toggleFees(bool on)",
            "file": "FeeToSetter.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 2
          }
        ]
      },
      "implementationNames": {
        "eth:0x18e433c7Bf8A2E1d0197CE5d8f9AFAda1A771360": "FeeToSetter"
      }
    },
    {
      "name": "Timelock",
      "address": "eth:0x1a9C8182C09F50C8318d769245beA52c32BE35BC",
      "type": "Contract",
      "sourceHashes": [
        "0xc3a519884c2c5eb5c8fa33e1f7c27bf1576088eddc2d9dd478bd1889a4f7c649"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1600107105,
      "sinceBlock": 10861678,
      "values": {
        "$immutable": true,
        "admin": "eth:0x408ED6354d4973f66138C91495F2f2FCbd8724C3",
        "delay": 172800,
        "GRACE_PERIOD": 1209600,
        "MAXIMUM_DELAY": 2592000,
        "MINIMUM_DELAY": 172800,
        "pendingAdmin": "eth:0x0000000000000000000000000000000000000000",
        "writeFunctionPermissions": [
          {
            "function": "acceptAdmin",
            "signature": "function acceptAdmin()",
            "file": "Timelock.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 7
          },
          {
            "function": "cancelTransaction",
            "signature": "function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta)",
            "file": "Timelock.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 6
          },
          {
            "function": "executeTransaction",
            "signature": "function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta)",
            "file": "Timelock.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 5
          },
          {
            "function": "queueTransaction",
            "signature": "function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta)",
            "file": "Timelock.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 7
          },
          {
            "function": "setDelay",
            "signature": "function setDelay(uint delay_)",
            "file": "Timelock.sol",
            "permissionType": "msgSender",
            "category": "administrative",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 8
          },
          {
            "function": "setPendingAdmin",
            "signature": "function setPendingAdmin(address pendingAdmin_)",
            "file": "Timelock.sol",
            "permissionType": "msgSender",
            "category": "administrative",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 8
          }
        ]
      },
      "implementationNames": {
        "eth:0x1a9C8182C09F50C8318d769245beA52c32BE35BC": "Timelock"
      }
    },
    {
      "name": "GovernorBravoDelegator",
      "address": "eth:0x408ED6354d4973f66138C91495F2f2FCbd8724C3",
      "type": "Contract",
      "sourceHashes": [
        "0x92c0e08160dd99ea5e08e262c7d056f8fdc6a795e7ab444557bdf28f20a3c4d2"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1629421922,
      "sinceBlock": 13059157,
      "values": {
        "$immutable": true,
        "admin": "eth:0x1a9C8182C09F50C8318d769245beA52c32BE35BC",
        "implementation": "eth:0x53a328F4086d7C0F1Fa19e594c9b842125263026",
        "pendingAdmin": "eth:0x0000000000000000000000000000000000000000",
        "writeFunctionPermissions": [
          {
            "function": "_setImplementation",
            "signature": "function _setImplementation(address implementation_)",
            "file": "contracts/GovernorBravoDelegator.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 2
          }
        ]
      },
      "implementationNames": {
        "eth:0x408ED6354d4973f66138C91495F2f2FCbd8724C3": "GovernorBravoDelegator"
      }
    },
    {
      "name": "GovernorBravoDelegate",
      "address": "eth:0x53a328F4086d7C0F1Fa19e594c9b842125263026",
      "type": "Contract",
      "sourceHashes": [
        "0x83c5ec957bf892e1f80953f9908380c73053d2aac32bbb47f6cc134b69ccba7c"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1629421093,
      "sinceBlock": 13059103,
      "values": {
        "$immutable": true,
        "admin": "eth:0x0000000000000000000000000000000000000000",
        "BALLOT_TYPEHASH": "0x150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f",
        "DOMAIN_TYPEHASH": "0x8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866",
        "getActions": [
          [[], [], [], []],
          [[], [], [], []],
          [[], [], [], []],
          [[], [], [], []],
          [[], [], [], []]
        ],
        "implementation": "eth:0x0000000000000000000000000000000000000000",
        "initialProposalId": 0,
        "MAX_PROPOSAL_THRESHOLD": "10000000000000000000000000",
        "MAX_VOTING_DELAY": 40320,
        "MAX_VOTING_PERIOD": 80640,
        "MIN_PROPOSAL_THRESHOLD": "1000000000000000000000000",
        "MIN_VOTING_DELAY": 1,
        "MIN_VOTING_PERIOD": 5760,
        "name": "Uniswap Governor Bravo",
        "pendingAdmin": "eth:0x0000000000000000000000000000000000000000",
        "proposalCount": 0,
        "proposalMaxOperations": 10,
        "proposals": [
          [
            0,
            "eth:0x0000000000000000000000000000000000000000",
            0,
            0,
            0,
            0,
            0,
            0,
            false,
            false
          ],
          [
            0,
            "eth:0x0000000000000000000000000000000000000000",
            0,
            0,
            0,
            0,
            0,
            0,
            false,
            false
          ],
          [
            0,
            "eth:0x0000000000000000000000000000000000000000",
            0,
            0,
            0,
            0,
            0,
            0,
            false,
            false
          ],
          [
            0,
            "eth:0x0000000000000000000000000000000000000000",
            0,
            0,
            0,
            0,
            0,
            0,
            false,
            false
          ],
          [
            0,
            "eth:0x0000000000000000000000000000000000000000",
            0,
            0,
            0,
            0,
            0,
            0,
            false,
            false
          ]
        ],
        "proposalThreshold": 0,
        "quorumVotes": "40000000000000000000000000",
        "state": [],
        "timelock": "eth:0x0000000000000000000000000000000000000000",
        "uni": "eth:0x0000000000000000000000000000000000000000",
        "votingDelay": 0,
        "votingPeriod": 0,
        "writeFunctionPermissions": [
          {
            "function": "_acceptAdmin",
            "signature": "function _acceptAdmin()",
            "file": "contracts/GovernorBravoDelegate.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 3
          },
          {
            "function": "_initiate",
            "signature": "function _initiate(uint proposalCount)",
            "file": "contracts/GovernorBravoDelegate.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 4
          },
          {
            "function": "_setPendingAdmin",
            "signature": "function _setPendingAdmin(address newPendingAdmin)",
            "file": "contracts/GovernorBravoDelegate.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 4
          },
          {
            "function": "_setProposalThreshold",
            "signature": "function _setProposalThreshold(uint newProposalThreshold)",
            "file": "contracts/GovernorBravoDelegate.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 5
          },
          {
            "function": "_setVotingDelay",
            "signature": "function _setVotingDelay(uint newVotingDelay)",
            "file": "contracts/GovernorBravoDelegate.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 6
          },
          {
            "function": "_setVotingPeriod",
            "signature": "function _setVotingPeriod(uint newVotingPeriod)",
            "file": "contracts/GovernorBravoDelegate.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 6
          },
          {
            "function": "cancel",
            "signature": "function cancel(uint proposalId)",
            "file": "contracts/GovernorBravoDelegate.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 3
          },
          {
            "function": "castVote",
            "signature": "function castVote(uint proposalId, uint8 support)",
            "file": "contracts/GovernorBravoDelegate.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 1
          },
          {
            "function": "castVoteBySig",
            "signature": "function castVoteBySig(uint proposalId, uint8 support, uint8 v, bytes32 r, bytes32 s)",
            "file": "contracts/GovernorBravoDelegate.sol",
            "permissionType": "none",
            "category": "other",
            "requireStatementCount": 4
          },
          {
            "function": "castVoteWithReason",
            "signature": "function castVoteWithReason(uint proposalId, uint8 support, string calldata reason)",
            "file": "contracts/GovernorBravoDelegate.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 4
          },
          {
            "function": "execute",
            "signature": "function execute(uint proposalId)",
            "file": "contracts/GovernorBravoDelegate.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 3
          },
          {
            "function": "initialize",
            "signature": "function initialize(address timelock_, address uni_, uint votingPeriod_, uint votingDelay_, uint proposalThreshold_)",
            "file": "contracts/GovernorBravoDelegate.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 9
          },
          {
            "function": "propose",
            "signature": "function propose(address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas, string memory description)",
            "file": "contracts/GovernorBravoDelegate.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 7
          },
          {
            "function": "queue",
            "signature": "function queue(uint proposalId)",
            "file": "contracts/GovernorBravoDelegate.sol",
            "permissionType": "none",
            "category": "other",
            "requireStatementCount": 4
          }
        ]
      },
      "errors": {
        "getActions": "Processing error occurred.",
        "proposals": "Processing error occurred."
      },
      "implementationNames": {
        "eth:0x53a328F4086d7C0F1Fa19e594c9b842125263026": "GovernorBravoDelegate"
      }
    },
    {
      "name": "UniswapV2Factory",
      "address": "eth:0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
      "type": "Contract",
      "sourceHashes": [
        "0x740f0bedcd24236a442f73bc92b35f0491744573f6c6248069d63b2e8105c076"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1588610042,
      "sinceBlock": 10000835,
      "values": {
        "$immutable": true,
        "allPairsLength": 458754,
        "feeTo": "eth:0x0000000000000000000000000000000000000000",
        "feeToSetter": "eth:0x18e433c7Bf8A2E1d0197CE5d8f9AFAda1A771360",
        "writeFunctionPermissions": [
          {
            "function": "createPair",
            "signature": "function createPair(address tokenA, address tokenB)",
            "file": "UniswapV2Factory.sol",
            "permissionType": "none",
            "category": "other"
          },
          {
            "function": "setFeeTo",
            "signature": "function setFeeTo(address)",
            "file": "UniswapV2Factory.sol",
            "permissionType": "none",
            "category": "administrative"
          },
          {
            "function": "setFeeToSetter",
            "signature": "function setFeeToSetter(address)",
            "file": "UniswapV2Factory.sol",
            "permissionType": "none",
            "category": "administrative"
          }
        ]
      },
      "implementationNames": {
        "eth:0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f": "UniswapV2Factory"
      }
    },
    {
      "name": "UniswapV2Router02",
      "address": "eth:0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
      "type": "Contract",
      "sourceHashes": [
        "0x0970bf12d3a22dff4bb54b209552c6145efac051cb40b1d37793c9d2024c5ab5"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1591388241,
      "sinceBlock": 10207858,
      "values": {
        "$immutable": true,
        "factory": "eth:0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f",
        "WETH": "eth:0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
        "writeFunctionPermissions": [
          {
            "function": "addLiquidity",
            "signature": "function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    )",
            "file": "UniswapV2Router02.sol",
            "permissionType": "none",
            "category": "other"
          },
          {
            "function": "addLiquidityETH",
            "signature": "function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )",
            "file": "UniswapV2Router02.sol",
            "permissionType": "none",
            "category": "other"
          },
          {
            "function": "removeLiquidity",
            "signature": "function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    )",
            "file": "UniswapV2Router02.sol",
            "permissionType": "none",
            "category": "other"
          },
          {
            "function": "removeLiquidityETH",
            "signature": "function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )",
            "file": "UniswapV2Router02.sol",
            "permissionType": "none",
            "category": "other"
          },
          {
            "function": "removeLiquidityETHSupportingFeeOnTransferTokens",
            "signature": "function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )",
            "file": "UniswapV2Router02.sol",
            "permissionType": "none",
            "category": "other"
          },
          {
            "function": "removeLiquidityETHWithPermit",
            "signature": "function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    )",
            "file": "UniswapV2Router02.sol",
            "permissionType": "none",
            "category": "other"
          },
          {
            "function": "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
            "signature": "function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    )",
            "file": "UniswapV2Router02.sol",
            "permissionType": "none",
            "category": "other"
          },
          {
            "function": "removeLiquidityWithPermit",
            "signature": "function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    )",
            "file": "UniswapV2Router02.sol",
            "permissionType": "none",
            "category": "other"
          },
          {
            "function": "swapETHForExactTokens",
            "signature": "function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)",
            "file": "UniswapV2Router02.sol",
            "permissionType": "none",
            "category": "other"
          },
          {
            "function": "swapExactETHForTokens",
            "signature": "function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)",
            "file": "UniswapV2Router02.sol",
            "permissionType": "none",
            "category": "other"
          },
          {
            "function": "swapExactETHForTokensSupportingFeeOnTransferTokens",
            "signature": "function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    )",
            "file": "UniswapV2Router02.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 1
          },
          {
            "function": "swapExactTokensForETH",
            "signature": "function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)",
            "file": "UniswapV2Router02.sol",
            "permissionType": "none",
            "category": "other"
          },
          {
            "function": "swapExactTokensForETHSupportingFeeOnTransferTokens",
            "signature": "function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    )",
            "file": "UniswapV2Router02.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 1
          },
          {
            "function": "swapExactTokensForTokens",
            "signature": "function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    )",
            "file": "UniswapV2Router02.sol",
            "permissionType": "none",
            "category": "other"
          },
          {
            "function": "swapExactTokensForTokensSupportingFeeOnTransferTokens",
            "signature": "function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    )",
            "file": "UniswapV2Router02.sol",
            "permissionType": "none",
            "category": "other",
            "requireStatementCount": 1
          },
          {
            "function": "swapTokensForExactETH",
            "signature": "function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)",
            "file": "UniswapV2Router02.sol",
            "permissionType": "none",
            "category": "other"
          },
          {
            "function": "swapTokensForExactTokens",
            "signature": "function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    )",
            "file": "UniswapV2Router02.sol",
            "permissionType": "none",
            "category": "other"
          }
        ]
      },
      "implementationNames": {
        "eth:0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D": "UniswapV2Router02"
      }
    },
    {
      "name": "Wrapped Ether Token",
      "address": "eth:0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
      "type": "Contract",
      "sourceHashes": [
        "0xec8c1fea9a5a10c4c028664a56d678a0776b07cfc510fc7fa54db0aed0978f49"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1513077455,
      "sinceBlock": 4719568,
      "values": {
        "$immutable": true,
        "decimals": 18,
        "name": "Wrapped Ether",
        "symbol": "WETH",
        "totalSupply": "2414204512946196726391247",
        "writeFunctionPermissions": [
          {
            "function": "approve",
            "signature": "function approve(address guy, uint wad)",
            "file": "WETH9.sol",
            "permissionType": "msgSender",
            "category": "other",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 2
          },
          {
            "function": "deposit",
            "signature": "function deposit()",
            "file": "WETH9.sol",
            "permissionType": "msgSender",
            "category": "financial",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 3
          },
          {
            "function": "transfer",
            "signature": "function transfer(address dst, uint wad)",
            "file": "WETH9.sol",
            "permissionType": "msgSender",
            "category": "financial",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 2
          },
          {
            "function": "transferFrom",
            "signature": "function transferFrom(address src, address dst, uint wad)",
            "file": "WETH9.sol",
            "permissionType": "msgSender",
            "category": "financial",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 2
          },
          {
            "function": "withdraw",
            "signature": "function withdraw(uint wad)",
            "file": "WETH9.sol",
            "permissionType": "msgSender",
            "category": "financial",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 3
          }
        ]
      },
      "implementationNames": {
        "eth:0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2": "WETH9"
      }
    },
    {
      "name": "FeeTo",
      "address": "eth:0xDAF819c2437a82f9e01f6586207ebF961a7f0970",
      "type": "Contract",
      "sourceHashes": [
        "0xe4424a789852219ddf8a13b1445d4257df4cc0f757c0b4ee4ae793572d2f1e2f"
      ],
      "proxyType": "immutable",
      "sinceTimestamp": 1600286855,
      "sinceBlock": 10875203,
      "values": {
        "$immutable": true,
        "feeRecipient": "eth:0x0000000000000000000000000000000000000000",
        "owner": "eth:0x1a9C8182C09F50C8318d769245beA52c32BE35BC",
        "writeFunctionPermissions": [
          {
            "function": "claim",
            "signature": "function claim(address pair)",
            "file": "FeeTo.sol",
            "permissionType": "none",
            "category": "other"
          },
          {
            "function": "renounce",
            "signature": "function renounce(address pair)",
            "file": "FeeTo.sol",
            "permissionType": "none",
            "category": "other"
          },
          {
            "function": "setFeeRecipient",
            "signature": "function setFeeRecipient(address feeRecipient_)",
            "file": "FeeTo.sol",
            "permissionType": "msgSender",
            "category": "administrative",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 2
          },
          {
            "function": "setOwner",
            "signature": "function setOwner(address owner_)",
            "file": "FeeTo.sol",
            "permissionType": "msgSender",
            "category": "administrative",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 3
          },
          {
            "function": "updateTokenAllowState",
            "signature": "function updateTokenAllowState(address token, bool allowed)",
            "file": "FeeTo.sol",
            "permissionType": "msgSender",
            "category": "administrative",
            "hasMsgSenderCheck": true,
            "requireStatementCount": 1
          },
          {
            "function": "updateTokenAllowStates",
            "signature": "function updateTokenAllowStates(address[] memory tokens, bool allowed)",
            "file": "FeeTo.sol",
            "permissionType": "none",
            "category": "administrative"
          }
        ]
      },
      "implementationNames": {
        "eth:0xDAF819c2437a82f9e01f6586207ebF961a7f0970": "FeeTo"
      }
    }
  ],
  "abis": {
    "eth:0x0C722a487876989Af8a05FFfB6e32e45cc23FB3A": [
      "constructor()",
      "event Approval(address indexed owner, address indexed spender, uint256 value)",
      "event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to)",
      "event Mint(address indexed sender, uint256 amount0, uint256 amount1)",
      "event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to)",
      "event Sync(uint112 reserve0, uint112 reserve1)",
      "event Transfer(address indexed from, address indexed to, uint256 value)",
      "function DOMAIN_SEPARATOR() view returns (bytes32)",
      "function MINIMUM_LIQUIDITY() view returns (uint256)",
      "function PERMIT_TYPEHASH() view returns (bytes32)",
      "function allowance(address, address) view returns (uint256)",
      "function approve(address spender, uint256 value) returns (bool)",
      "function balanceOf(address) view returns (uint256)",
      "function burn(address to) returns (uint256 amount0, uint256 amount1)",
      "function decimals() view returns (uint8)",
      "function factory() view returns (address)",
      "function getReserves() view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast)",
      "function initialize(address _token0, address _token1)",
      "function kLast() view returns (uint256)",
      "function mint(address to) returns (uint256 liquidity)",
      "function name() view returns (string)",
      "function nonces(address) view returns (uint256)",
      "function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)",
      "function price0CumulativeLast() view returns (uint256)",
      "function price1CumulativeLast() view returns (uint256)",
      "function skim(address to)",
      "function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes data)",
      "function symbol() view returns (string)",
      "function sync()",
      "function token0() view returns (address)",
      "function token1() view returns (address)",
      "function totalSupply() view returns (uint256)",
      "function transfer(address to, uint256 value) returns (bool)",
      "function transferFrom(address from, address to, uint256 value) returns (bool)"
    ],
    "eth:0x18e433c7Bf8A2E1d0197CE5d8f9AFAda1A771360": [
      "constructor(address factory_, uint256 vestingEnd_, address owner_, address feeTo_)",
      "function factory() view returns (address)",
      "function feeTo() view returns (address)",
      "function owner() view returns (address)",
      "function setFeeToSetter(address feeToSetter_)",
      "function setOwner(address owner_)",
      "function toggleFees(bool on)",
      "function vestingEnd() view returns (uint256)"
    ],
    "eth:0x1a9C8182C09F50C8318d769245beA52c32BE35BC": [
      "constructor(address admin_, uint256 delay_)",
      "event CancelTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature, bytes data, uint256 eta)",
      "event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature, bytes data, uint256 eta)",
      "event NewAdmin(address indexed newAdmin)",
      "event NewDelay(uint256 indexed newDelay)",
      "event NewPendingAdmin(address indexed newPendingAdmin)",
      "event QueueTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature, bytes data, uint256 eta)",
      "function GRACE_PERIOD() view returns (uint256)",
      "function MAXIMUM_DELAY() view returns (uint256)",
      "function MINIMUM_DELAY() view returns (uint256)",
      "function acceptAdmin()",
      "function admin() view returns (address)",
      "function cancelTransaction(address target, uint256 value, string signature, bytes data, uint256 eta)",
      "function delay() view returns (uint256)",
      "function executeTransaction(address target, uint256 value, string signature, bytes data, uint256 eta) payable returns (bytes)",
      "function pendingAdmin() view returns (address)",
      "function queueTransaction(address target, uint256 value, string signature, bytes data, uint256 eta) returns (bytes32)",
      "function queuedTransactions(bytes32) view returns (bool)",
      "function setDelay(uint256 delay_)",
      "function setPendingAdmin(address pendingAdmin_)"
    ],
    "eth:0x408ED6354d4973f66138C91495F2f2FCbd8724C3": [
      "constructor(address timelock_, address uni_, address admin_, address implementation_, uint256 votingPeriod_, uint256 votingDelay_, uint256 proposalThreshold_)",
      "event NewAdmin(address oldAdmin, address newAdmin)",
      "event NewImplementation(address oldImplementation, address newImplementation)",
      "event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin)",
      "event ProposalCanceled(uint256 id)",
      "event ProposalCreated(uint256 id, address proposer, address[] targets, uint256[] values, string[] signatures, bytes[] calldatas, uint256 startBlock, uint256 endBlock, string description)",
      "event ProposalExecuted(uint256 id)",
      "event ProposalQueued(uint256 id, uint256 eta)",
      "event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold)",
      "event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 votes, string reason)",
      "event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay)",
      "event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod)",
      "function _setImplementation(address implementation_)",
      "function admin() view returns (address)",
      "function implementation() view returns (address)",
      "function pendingAdmin() view returns (address)"
    ],
    "eth:0x53a328F4086d7C0F1Fa19e594c9b842125263026": [
      "event NewAdmin(address oldAdmin, address newAdmin)",
      "event NewImplementation(address oldImplementation, address newImplementation)",
      "event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin)",
      "event ProposalCanceled(uint256 id)",
      "event ProposalCreated(uint256 id, address proposer, address[] targets, uint256[] values, string[] signatures, bytes[] calldatas, uint256 startBlock, uint256 endBlock, string description)",
      "event ProposalExecuted(uint256 id)",
      "event ProposalQueued(uint256 id, uint256 eta)",
      "event ProposalThresholdSet(uint256 oldProposalThreshold, uint256 newProposalThreshold)",
      "event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 votes, string reason)",
      "event VotingDelaySet(uint256 oldVotingDelay, uint256 newVotingDelay)",
      "event VotingPeriodSet(uint256 oldVotingPeriod, uint256 newVotingPeriod)",
      "function BALLOT_TYPEHASH() view returns (bytes32)",
      "function DOMAIN_TYPEHASH() view returns (bytes32)",
      "function MAX_PROPOSAL_THRESHOLD() view returns (uint256)",
      "function MAX_VOTING_DELAY() view returns (uint256)",
      "function MAX_VOTING_PERIOD() view returns (uint256)",
      "function MIN_PROPOSAL_THRESHOLD() view returns (uint256)",
      "function MIN_VOTING_DELAY() view returns (uint256)",
      "function MIN_VOTING_PERIOD() view returns (uint256)",
      "function _acceptAdmin()",
      "function _initiate(uint256 proposalCount)",
      "function _setPendingAdmin(address newPendingAdmin)",
      "function _setProposalThreshold(uint256 newProposalThreshold)",
      "function _setVotingDelay(uint256 newVotingDelay)",
      "function _setVotingPeriod(uint256 newVotingPeriod)",
      "function admin() view returns (address)",
      "function cancel(uint256 proposalId)",
      "function castVote(uint256 proposalId, uint8 support)",
      "function castVoteBySig(uint256 proposalId, uint8 support, uint8 v, bytes32 r, bytes32 s)",
      "function castVoteWithReason(uint256 proposalId, uint8 support, string reason)",
      "function execute(uint256 proposalId) payable",
      "function getActions(uint256 proposalId) view returns (address[] targets, uint256[] values, string[] signatures, bytes[] calldatas)",
      "function getReceipt(uint256 proposalId, address voter) view returns (tuple(bool hasVoted, uint8 support, uint96 votes))",
      "function implementation() view returns (address)",
      "function initialProposalId() view returns (uint256)",
      "function initialize(address timelock_, address uni_, uint256 votingPeriod_, uint256 votingDelay_, uint256 proposalThreshold_)",
      "function latestProposalIds(address) view returns (uint256)",
      "function name() view returns (string)",
      "function pendingAdmin() view returns (address)",
      "function proposalCount() view returns (uint256)",
      "function proposalMaxOperations() view returns (uint256)",
      "function proposalThreshold() view returns (uint256)",
      "function proposals(uint256) view returns (uint256 id, address proposer, uint256 eta, uint256 startBlock, uint256 endBlock, uint256 forVotes, uint256 againstVotes, uint256 abstainVotes, bool canceled, bool executed)",
      "function propose(address[] targets, uint256[] values, string[] signatures, bytes[] calldatas, string description) returns (uint256)",
      "function queue(uint256 proposalId)",
      "function quorumVotes() view returns (uint256)",
      "function state(uint256 proposalId) view returns (uint8)",
      "function timelock() view returns (address)",
      "function uni() view returns (address)",
      "function votingDelay() view returns (uint256)",
      "function votingPeriod() view returns (uint256)"
    ],
    "eth:0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f": [
      "constructor(address _feeToSetter)",
      "event PairCreated(address indexed token0, address indexed token1, address pair, uint256)",
      "function allPairs(uint256) view returns (address)",
      "function allPairsLength() view returns (uint256)",
      "function createPair(address tokenA, address tokenB) returns (address pair)",
      "function feeTo() view returns (address)",
      "function feeToSetter() view returns (address)",
      "function getPair(address, address) view returns (address)",
      "function setFeeTo(address _feeTo)",
      "function setFeeToSetter(address _feeToSetter)"
    ],
    "eth:0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D": [
      "constructor(address _factory, address _WETH)",
      "function WETH() view returns (address)",
      "function addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) returns (uint256 amountA, uint256 amountB, uint256 liquidity)",
      "function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity)",
      "function factory() view returns (address)",
      "function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) pure returns (uint256 amountIn)",
      "function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) pure returns (uint256 amountOut)",
      "function getAmountsIn(uint256 amountOut, address[] path) view returns (uint256[] amounts)",
      "function getAmountsOut(uint256 amountIn, address[] path) view returns (uint256[] amounts)",
      "function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) pure returns (uint256 amountB)",
      "function removeLiquidity(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) returns (uint256 amountA, uint256 amountB)",
      "function removeLiquidityETH(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) returns (uint256 amountToken, uint256 amountETH)",
      "function removeLiquidityETHSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline) returns (uint256 amountETH)",
      "function removeLiquidityETHWithPermit(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) returns (uint256 amountToken, uint256 amountETH)",
      "function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address token, uint256 liquidity, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) returns (uint256 amountETH)",
      "function removeLiquidityWithPermit(address tokenA, address tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) returns (uint256 amountA, uint256 amountB)",
      "function swapETHForExactTokens(uint256 amountOut, address[] path, address to, uint256 deadline) payable returns (uint256[] amounts)",
      "function swapExactETHForTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline) payable returns (uint256[] amounts)",
      "function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] path, address to, uint256 deadline) payable",
      "function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline) returns (uint256[] amounts)",
      "function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)",
      "function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline) returns (uint256[] amounts)",
      "function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] path, address to, uint256 deadline)",
      "function swapTokensForExactETH(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline) returns (uint256[] amounts)",
      "function swapTokensForExactTokens(uint256 amountOut, uint256 amountInMax, address[] path, address to, uint256 deadline) returns (uint256[] amounts)"
    ],
    "eth:0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2": [
      "function name() view returns (string)",
      "function approve(address guy, uint256 wad) returns (bool)",
      "function totalSupply() view returns (uint256)",
      "function transferFrom(address src, address dst, uint256 wad) returns (bool)",
      "function withdraw(uint256 wad)",
      "function decimals() view returns (uint8)",
      "function balanceOf(address) view returns (uint256)",
      "function symbol() view returns (string)",
      "function transfer(address dst, uint256 wad) returns (bool)",
      "function deposit() payable",
      "function allowance(address, address) view returns (uint256)",
      "event Approval(address indexed src, address indexed guy, uint256 wad)",
      "event Transfer(address indexed src, address indexed dst, uint256 wad)",
      "event Deposit(address indexed dst, uint256 wad)",
      "event Withdrawal(address indexed src, uint256 wad)"
    ],
    "eth:0xDAF819c2437a82f9e01f6586207ebF961a7f0970": [
      "constructor(address owner_)",
      "function claim(address pair) returns (uint256 value)",
      "function feeRecipient() view returns (address)",
      "function owner() view returns (address)",
      "function pairAllowStates(address) view returns (uint128 token0DisallowCount, uint128 token1DisallowCount)",
      "function renounce(address pair) returns (uint256 value)",
      "function setFeeRecipient(address feeRecipient_)",
      "function setOwner(address owner_)",
      "function tokenAllowStates(address) view returns (bool allowed, uint128 disallowCount)",
      "function updateTokenAllowState(address token, bool allowed)",
      "function updateTokenAllowStates(address[] tokens, bool allowed)"
    ]
  },
  "usedTemplates": {},
  "usedBlockNumbers": { "ethereum": 23441789 },
  "permissionsConfigHash": "0x7dfcb7764291e2ea59a428169e5dd337ca70f2a1d5ea816d40b5a860474295a3"
}
